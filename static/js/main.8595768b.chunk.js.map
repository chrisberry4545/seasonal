{"version":3,"sources":["../../shared-frontend-redux/dist/selectors/ui.selectors.js","components-layout/ImageGridItem/ImageGridItem.tsx","components-layout/SummaryColumn/index.ts","services/image-loader.service.ts","components-elements/BackgroundImageWithLoadingSpinner/BackgroundImageWithLoadingSpinner.tsx","components-elements/GroupedSelectBox/GroupedSelectBox.tsx","components-elements/index.ts","../../shared-frontend-redux/dist/selectors/current-food-details.selectors.js","../../shared-frontend-redux/dist/selectors/all-basic-season.selectors.js","../../shared-frontend-redux/dist/selectors/all-seasons-with-food.selectors.js","../../shared-frontend-redux/dist/selectors/country.selectors.js","../../shared-frontend-redux/dist/selectors/current-season.selectors.js","../../shared-frontend-redux/dist/selectors/settings.selectors.js","components-layout/ImageGrid/ImageGrid.tsx","components-layout/SummaryColumn/SummaryColumn.tsx","components-layout/SummaryColumnList/index.ts","components-layout/SummaryColumnList/SummaryColumnList.tsx","components-layout/SeasonNameView/SeasonNameView.tsx","../../shared-frontend-redux/dist/actions/index.js","../../shared-frontend-redux/dist/actions/all-basic-season.actions.js","../../shared-frontend-redux/dist/actions/all-season-with-food.actions.js","../../shared-frontend-redux/dist/actions/all-seasons-with-recipes.actions.js","../../shared-frontend-redux/dist/actions/country.actions.js","../../shared-frontend-redux/dist/actions/current-food-details.actions.js","../../shared-frontend-redux/dist/actions/current-season.actions.js","../../shared-frontend-redux/dist/actions/settings.actions.js","../../shared-frontend-redux/dist/actions/init.actions.js","../../shared-frontend-redux/dist/actions/season-name.actions.js","../../shared-frontend-redux/dist/actions/ui.actions.js","../../shared-frontend-redux/dist/selectors/combined-selectors/index.js","../../shared-frontend-redux/dist/selectors/combined-selectors/all-seasons-with-food-and-search.selectors.js","../../shared-frontend-utilities/dist/get-nearest-region-from-lat-lng.js","../../shared-frontend-utilities/dist/name-search.js","../../shared-frontend-utilities/dist/retrieve-backend-data.js","../../shared-models/dist/enums/index.js","../../shared-models/dist/enums/diet-type.enum.js","../../shared-models/dist/enums/user-roles.enum.js","../../shared-models/dist/config/index.js","../../shared-frontend-redux/dist/selectors/combined-selectors/current-country.selectors.js","../../shared-frontend-redux/dist/selectors/combined-selectors/current-food-data-and-basic-season.selectors.js","../../shared-frontend-redux/dist/selectors/combined-selectors/current-food-details-data-with-search.selectors.js","../../shared-frontend-redux/dist/selectors/combined-selectors/current-season-data-with-search.selectors.js","../../shared-frontend-redux/dist/epics/index.js","../../shared-frontend-redux/dist/epics/current-season-with-food.epics.js","../../shared-frontend-redux/dist/epics/current-season-with-recipes.epics.js","../../shared-frontend-redux/dist/epics/init.epics.js","../../shared-frontend-redux/dist/epics/all-basic-season.epics.js","../../shared-frontend-redux/dist/epics/all-seasons-with-food.epic.js","../../shared-frontend-redux/dist/epics/all-seasons-with-recipes.epic.js","../../shared-frontend-redux/dist/epics/current-food-details.epics.js","../../shared-frontend-redux/dist/epics/season-name.epics.js","../../shared-frontend-redux/dist/epics/country.epics.js","../../shared-frontend-redux/dist/reducers/index.js","../../shared-frontend-redux/dist/reducers/current-food-details.reducer.js","../../shared-frontend-redux/dist/reducers/current-season.reducer.js","../../shared-frontend-redux/dist/reducers/all-basic-seasons.reducer.js","../../shared-frontend-redux/dist/reducers/all-seasons.reducer.js","../../shared-frontend-redux/dist/reducers/settings.reducer.js","components-layout/index.ts","../../shared-frontend-redux/dist/reducers/ui.reducer.js","../../shared-frontend-redux/dist/reducers/country.reducer.js","../../shared-frontend-redux/dist/index.js","../../shared-frontend-utilities/dist/index.js","../../shared-models/dist/index.js","../../shared-frontend-redux/dist/selectors/index.js","components-main/AboutEatSeasonal/AboutEatSeasonal.tsx","components-main/AndroidAppDownload/AndroidAppDownload.tsx","components-main/BottomTabs/BottomTabs.tsx","const/tabs.enum.ts","store/selectors/route.selectors.ts","const/urls.const.ts","store/selectors/web-ui.selectors.ts","store/epics/tracking.epics.ts","store/actions/web-ui.actions.ts","store/actions/route.actions.ts","store/epics/settings.epics.ts","store/epics/index.ts","store/epics/route.epics.ts","store/reducers/index.ts","store/reducers/web-ui.reducer.ts","components-main/BottomTabs/BottomTabs.connector.ts","components-main/CurrentSeasonName/CurrentSeasonName.tsx","components-main/CurrentSeasonName/CurrentSeasonName.connector.ts","components-main/DietaryFilters/DietaryFilters.tsx","components-main/DietaryFilters/DietaryFilters.connector.ts","components-main/FoodDetailsLoader/FoodDetailsLoader.tsx","components-main/FoodDetailsLoader/FoodDetailsLoader.connector.ts","components-main/FoodDetailsTopSection/FoodDetailsTopSection.tsx","components-main/FoodDetailsTopSection/FoodDetailsTopSection.connector.ts","components-main/FoodTable/FoodTable.tsx","components-main/FoodTable/FoodTable.connector.ts","components-main/Header/Header.tsx","components-main/Header/Header.connector.ts","components-main/IOSAppDownload/IOSAppDownload.tsx","components-main/LocationSelector/LocationSelector.tsx","components-main/LocationSelector/LocationSelector.connector.ts","components-layout/PageLayout/PageLayout.tsx","components-main/SeasonMenu/SeasonMenu.tsx","components-main/SeasonMenu/SeasonMenu.connector.ts","components-main/PageWithMenu/PageWithMenu.tsx","components-main/RecipesForFood/RecipesForFood.tsx","components-main/RecipesForFood/RecipesForFood.connector.ts","components-main/RecipeTable/RecipeTable.tsx","components-main/RecipeTable/RecipeTable.connector.ts","components-main/SearchBar/SearchBar.tsx","components-main/SearchBar/SearchBar.connector.ts","components-main/SeasonsForFood/SeasonsForFood.tsx","components-main/SeasonsForFood/SeasonsForFood.connector.ts","components-main/ViewWebAppVersion/ViewWebAppVersion.tsx","components-main/ViewWebAppVersion/ViewWebAppVersion.connector.ts","components-main/ViewAppLinks/ViewAppLinks.tsx","components-main/WhyEatSeasonal/WhyEatSeasonal.tsx","components-main/AllSeasons/AllSeasons.tsx","components-main/AllSeasons/AllSeasons.connector.ts","components-main/AllSeasonsGraph/AllSeasonsGraph.tsx","components-main/AllSeasonsGraph/AllSeasonsGraph.connector.ts","components-pages/FoodDetailsPage/FoodDetailsPage.tsx","components-pages/FoodTablePage/FoodTablePage.tsx","components-pages/IntroPage/IntroPage.tsx","components-pages/AllSeasonsPage/AllSeasonsPage.tsx","components-pages/SettingsPage/SettingsPage.tsx","components-app/App.tsx","serviceWorker.js","index.tsx","helpers/Animations/fade.animations.ts","helpers/Animations/animations.const.ts","helpers/functions/make-promise-cancelable.ts","helpers/functions/stored-data.ts","helpers/index.ts"],"names":["Object","defineProperty","exports","value","reselect_1","require","selectUiState","state","ui","selectIsMenuOpen","createSelector","uiState","isMenuOpen","selectCurrentSearchTerm","searchTerm","toLowerCase","selectIsSearchBarVisible","isSearchBarVisible","selectIsLocationSettingsPopupVisible","isLocationSettingsPopupVisible","selectIsCountryChangePromptVisible","isCountryChangePromptVisible","ImageGridItem","id","imageUrlSmall","onClick","name","skipAnimation","className","src","loadingImages","loadImage","imageSrc","Promise","resolve","image","document","createElement","push","addEventListener","createImageOnLoadPromise","FadeInOutAnimation","fadeInOutAnimation","BackgroundImageWithLoadingSpinner","Component","constructor","props","super","loadImagePromise","this","isVisible","componentDidMount","makePromiseCancelable","promise","then","setState","componentWillUnmount","cancel","getBackgroundImageStyle","backgroundImage","render","style","key","children","GroupedSelectBox","groups","onSelected","map","group","groupName","selectOptions","option","isSelected","selectCurrentFoodDetailsState","currentFoodDetailsData","selectIsCurrentFoodDetailsLoading","currentFoodDetails","isLoading","selectCurrentFoodDetails","data","selectCurrentFoodDetailsId","selectCurrentFoodDetailsName","selectCurrentFoodDetailsImageUrl","selectCurrentFoodDetailsSeasons","seasons","selectCurrentFoodDetailsRecipes","primaryFoodInRecipe","secondaryFoodInRecipe","selectAllBasicSeasonDataState","allBasicSeasonData","selectIsBasicSeasonsLoading","selectAllBasicSeasons","selectAllSeasonsWithFoodState","allSeasonsWithFoodData","selectIsAllSeasonsFoodLoading","isFoodLoading","selectIsAllSeasonsRecipesLoading","isRecipesLoading","selectAllSeasons","selectNumberOfAllSeasonsInView","numberOfSeasonsInView","selectHasMoreSeasonsInAllSeasonsView","numberOfAllSeasons","allSeasons","length","selectCountryState","countryData","selectAreCountriesLoading","countryState","selectCountries","selectAllRegions","countries","reduce","allRegions","nextCountry","regions","selectCurrentSeasonWithFoodState","currentSeasonData","selectIsCurrentSeasonFoodLoading","selectIsCurrentSeasonRecipesLoading","selectCurrentSeason","selectCurrentSeasonFood","currentSeason","food","selectCurrentSeasonRecipes","recipes","selectCurrentSeasonRecipesById","recipeId","find","selectCurrentSeasonIndex","currentSeasonIndex","selectCurrentSeasonName","selectSettingsState","settings","selectSettingsDietType","dietType","selectSettingsRegionCode","selectedRegionCode","selectSettingsUserId","userId","selectSettingsTimesAppStarted","timesAppStarted","ImageGrid","item","SummaryColumn","imageUrl","text","title","alt","SummaryColumnList","columns","column","index","SeasonNameView","__export","m","p","hasOwnProperty","SET_ALL_BASIC_SEASONS_START","setAllSeasonsStart","type","SET_ALL_BASIC_SEASONS_SUCCESS","setAllBasicSeasonsSuccess","seasonData","SET_ALL_SEASONS_WITH_FOOD_START","setAllSeasonsWithFoodStart","SET_ALL_SEASONS_WITH_FOOD_SUCCESS","setAllSeasonsWithFoodSuccess","INCREASE_NUMBER_OF_ALL_FOOD_SEASONS_IN_VIEW","increaseNumberOfAllFoodSeasonsInView","SET_ALL_SEASONS_WITH_RECIPES_START","setAllSeasonsWithRecipesStart","SET_ALL_SEASONS_WITH_RECIPES_SUCCESS","setAllSeasonsWithRecipesSuccess","GET_COUNTRIES_START","getCountriesStart","GET_COUNTRIES_SUCCESS","getCountriesSuccess","SET_REGION","setRegion","regionCode","USER_REGION_DETECTED","userRegionDetected","error","SET_USER_REGION_DETECTED","setUserRegionDetected","SET_CURRENT_FOOD_DETAILS_START","setCurrentFoodDetailsStart","foodItemId","SET_CURRENT_FOOD_DETAILS_ON_DIET_CHANGE","setCurrentFoodDetailsOnDietChange","SET_CURRENT_FOOD_DETAILS_SUCCESS","setCurrentFoodDetailsSuccess","currentFoodData","SET_CURRENT_SEASON_WITH_FOOD_START","setCurrentSeasonWithFoodStart","SET_CURRENT_SEASON_WITH_FOOD_SUCCESS","setCurrentSeasonWithFoodSuccess","SET_CURRENT_SEASON_WITH_RECIPES_START","setCurrentSeasonWithRecipesStart","SET_CURRENT_SEASON_WITH_RECIPES_SUCCESS","setCurrentSeasonWithRecipesSuccess","INIT_SETTINGS","initSettings","SET_DIET_TYPE","setDietType","INIT_APP","initApp","SET_SELECTED_SEASON_NAME","setSelectedSeasonName","seasonName","OPEN_MENU","openMenu","CLOSE_MENU","closeMenu","SELECT_SEASON","selectSeason","seasonIndex","GO_TO_ALL_SEASONS_VIEW","goToAllSeasonsView","GO_TO_SETTINGS_PAGE","goToSettingsPage","GO_BACK_FROM_SETTINGS_PAGE","goBackFromSettingsPage","FOOD_DETAILS_SELECT_SEASON","foodDetailsSelectSeason","SEARCH_BAR_CHANGED","searchBarChanged","newSearchTerm","SHOW_SEARCH_BAR","showSearchBar","HIDE_SEARCH_BAR","hideSearchBar","FOOD_ITEM_CLICKED","foodItemClicked","RECIPE_ITEM_CLICKED","recipeItemClicked","recipeItemId","FOOD_DETAILS_SELECT_RECIPE","foodDetailsSelectRecipe","SHOW_LOCATION_SETTINGS_POPUP","showLocationPopup","CLOSE_LOCATION_SETTINGS_POPUP","closeLocationPopup","HIDE_REGION_CHANGE_PROMPT","hideRegionChangePrompt","all_seasons_with_food_selectors_1","seasonal_shared_frontend_utilities_1","ui_selectors_1","selectAllSeasonsWithFoodAndSearchAppliedData","season","assign","getDataThatContainsSearchTerm","selectAllSeasonsVisibleFoodData","seasonsWithSearchApplied","slice","filter","selectFoodInSeasonGraphData","allSeasonData","convertDegressToRadians","deg","Math","PI","distanceBetweenLatLngInKm","latLng1","latLng2","dLat","lat","dLng","lng","a","sin","cos","atan2","sqrt","getNearestRegionFromLatLng","latLng","prevRegion","nextRegion","includes","seasonal_shared_models_1","getQueryString","isVegetarian","isVegan","countryCode","query","Boolean","join","getCurrentSeasonIndex","Date","getUTCMonth","getAllSeasons","queryString","undefined","fetch","SEASON_URL","resp","json","getSeasonWithFood","SEASON_WITH_FOOD_URL","getAllSeasonsWithFood","getSeasonWithRecipes","SEASON_WITH_RECIPES_URL","getAllSeasonsWithRecipes","getFoodDetailsData","foodId","FOOD_DETAILS_URL","getCountries","COUNTRY_URL","DIET_TYPE","USER_ROLES","BACKEND_URL","process","REACT_APP_BACKEND_URL","country_selectors_1","settings_selectors_1","selectCurrentRegion","region","code","selectCountryAndRegionsSelectGroup","country","current_food_details_selectors_1","all_basic_season_selectors_1","selectIsFoodDataOrBasicSeasonsLoading","isCurrentFoodDetailsLoading","isBasicSeasonDataLoading","selectSeasonsSelectedForFood","foodDetailsSeasons","basicSeasons","some","foodDetailSeason","selectVisibleRecipesForFoodDetailsData","current_season_selectors_1","selectVisibleFoodData","selectVisibleRecipeData","current_season_with_food_epics_1","current_season_with_recipes_epics_1","init_epics_1","all_basic_season_epics_1","all_seasons_with_food_epic_1","all_seasons_with_recipes_epic_1","current_food_details_epics_1","season_name_epics_1","country_epics_1","rootEpics","initAppEpic$","getCurrentSeasonWithFoodStartEpic$","getCurrentSeasonWithFoodEpic$","getCurrentSeasonWithRecipesStartEpic$","getCurrentSeasonWithRecipesEpic$","getAllBasicSeasonsStartEpic$","getAllBasicSeasonsEpic$","getAllSeasonsWithFood$","getAllSeasonsWithRecipes$","getCurrentFoodDetailsEpic$","updateFoodDetailsOnDietTypeChangeEpic$","setSeasonSelectedSeasonName$","getCountriesStart$","getCountries$","promptCountryChangeOnNewDetected$","hideRegionChangePrompt$","redux_observable_1","actions_1","operators_1","selectors_1","actions$","pipe","ofType","mapTo","state$","withLatestFrom","switchMap","foodData","VEGETARIAN","VEGAN","recipesData","rxjs_1","of","currentFoodDetailsId","action","selectedSeason","detectedRegion","settingsRegionCode","delay","current_food_details_reducer_1","current_season_reducer_1","all_basic_seasons_reducer_1","all_seasons_reducer_1","settings_reducer_1","ui_reducer_1","country_reducer_1","allReducers","allBasicSeasonReducer","allSeasonsReducer","countryReducer","currentFoodDetailsReducer","currentSeasonWithFoodReducer","settingsReducer","uiReducer","populateApiData","__importDefault","mod","__esModule","v4_1","ALL","initialSettings","default","AboutEatSeasonal","AndroidAppDownload","href","addTabClasses","TABS","selectCurrentFoodDetailsParams","createMatchSelector","routeParams","params","selectCurrentPath","getLocation","location","pathname","selectIsCurrentRouteAllSeasons","path","selectIsCurrentRouteSettings","selectCurrentTab","webUi","webUiState","currentTab","selectIsCurrentTabFood","FOOD","selectIsCurrentTabRecipes","RECIPES","ACTIONS_TO_TRACK","rootEpic","combineEpics","ga","ignoreElements","recipe","window","open","linkUrl","goBack","foodDetailsId","debounceTime","isRouteAllSeasons","getStoredData","tap","settingsState","setStoredData","epicMiddleware","createEpicMiddleware","storeHistory","createHashHistory","store","createStore","combineReducers","router","connectRouter","compose","applyMiddleware","routerMiddleware","run","BottomTabsConnecter","connect","isCurrentTabFood","isCurrentTabRecipes","dispatch","goToFoodTab","goToRecipesTab","CurrentSeasonNameConnecter","currentSeasonName","radioButtons","label","DietaryFiltersConnector","update","selectedValue","onChange","newValue","FoodDetailsLoaderConnecter","FoodDetailsTopSectionConnecter","foodImageUrl","foodName","onGoBack","FoodTableConnecter","onFoodClick","HeaderConnecter","onMenuOpen","SearchBarConnecter","IOSAppDownload","LocationSelectorConnecter","countryAndRegionSelectGroup","regionId","PageLayout","OverlayFadeInOutAnimation","SeasonMenuConnecter","isCurrentRouteAllSeasons","isCurrentRouteSettings","onAllSeasonsSelected","onClose","onSeasonSelected","onSettingsSelected","PageWithMenu","RecipesForFoodConnecter","currentFoodDetailsRecipes","onRecipeSelected","RecipeTableConnecter","onRecipeClick","getSearchBarClassName","onHideSearchBar","onSearchChanged","onShowSearchBar","ref","input","querySelector","focus","focusOnInputIfSearchVisible","placeholder","SeasonsForFoodConnecter","seasonsSelectedForFood","substring","ViewWebAppVersionConnector","onGoToWebVersion","ViewAppLinks","summaryColumns","WhyEatSeasonal","AllSeasonsConnector","hasMoreSeasonsInAllSeasonsView","pageStart","loadMore","hasMore","loader","AllSeasonsGraphConnector","foodInSeasonGraphData","width","height","dataKey","allowDecimals","fill","FoodDetailsPage","FoodTablePage","IntroPage","AllSeasonsPage","SettingsPage","App","history","component","exact","isLocalhost","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","rootElement","getElementById","hasChildNodes","hydrate","URL","origin","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","enterDelay","exitDelay","enterDuration","exitDuration","posed","enter","opacity","transition","duration","exit","hasCancelled","reject","val","isCanceled","localStorage","setItem","JSON","stringify","storedData","getItem","parse"],"mappings":"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","file":"static/js/main.8595768b.chunk.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst reselect_1 = require(\"reselect\");\nconst selectUiState = (state) => state.ui;\nexports.selectIsMenuOpen = reselect_1.createSelector(selectUiState, (uiState) => uiState.isMenuOpen);\nexports.selectCurrentSearchTerm = reselect_1.createSelector(selectUiState, (uiState) => uiState.searchTerm &&\n    uiState.searchTerm.toLowerCase());\nexports.selectIsSearchBarVisible = reselect_1.createSelector(selectUiState, (uiState) => uiState.isSearchBarVisible);\nexports.selectIsLocationSettingsPopupVisible = reselect_1.createSelector(selectUiState, (uiState) => uiState.isLocationSettingsPopupVisible);\nexports.selectIsCountryChangePromptVisible = reselect_1.createSelector(selectUiState, (uiState) => uiState.isCountryChangePromptVisible);\n","import React, { FC } from 'react';\n\nimport './ImageGridItem.scss';\n\nimport {\n  TextMedium\n} from '@chrisb-dev/seasonal-shared-frontend-components';\n\nimport {\n  BackgroundImageWithLoadingSpinner\n} from '../../components-elements';\nimport { IImageGridItem } from './ImageGridItem.interface';\n\nexport const ImageGridItem: FC<IImageGridItem> = ({\n  id,\n  imageUrlSmall,\n  onClick,\n  name,\n  skipAnimation\n}) => (\n  <div onClick={() => onClick && onClick(id)}\n    className='c-image-grid-item'>\n    <div className='c-image-grid-item__inner'>\n      <div className='c-image-grid-item__image'>\n        <BackgroundImageWithLoadingSpinner\n          src={imageUrlSmall} skipAnimation={skipAnimation}/>\n      </div>\n      <TextMedium className='c-image-grid-item__text'>\n        {name}\n      </TextMedium>\n    </div>\n  </div>\n);\n","export * from './SummaryColumn';\n\nexport * from './SummaryColumn.interface';\n","const loadingImages = [];\n\nconst createImageOnLoadPromise = (\n  imageSrc: string\n): Promise<HTMLImageElement> => {\n  return new Promise((resolve) => {\n    const image = document.createElement('img');\n    image.src = imageSrc;\n    loadingImages.push(image);\n    image.addEventListener('load', () => {\n      resolve(image);\n    });\n  });\n};\n\nexport const loadImage = (\n  imageSrc: string\n): Promise<HTMLImageElement> => {\n  const onLoadPromise = createImageOnLoadPromise(imageSrc);\n  return onLoadPromise;\n};\n","import React, { Component } from 'react';\n\nimport './BackgroundImageWithLoadingSpinner.scss';\n\nimport {\n  loadImage\n} from '../../services/image-loader.service';\n\nimport {\n  LoadingSpinner\n} from '@chrisb-dev/seasonal-shared-frontend-components';\n\nimport {\n  fadeInOutAnimation, makePromiseCancelable\n} from '../../helpers';\n\nimport { PoseGroup } from 'react-pose';\nimport { ICancelablePromise } from '../../interfaces';\n\nconst FadeInOutAnimation = fadeInOutAnimation();\n\ninterface IBackgroundImageWithLoadingSpinnerPropsInterface {\n  src: string;\n  skipAnimation?: boolean;\n}\ninterface IBackgroundImageWithLoadingSpinnerStateInterface {\n  isVisible: boolean;\n}\n\nexport class BackgroundImageWithLoadingSpinner\nextends Component<\n  IBackgroundImageWithLoadingSpinnerPropsInterface,\n  IBackgroundImageWithLoadingSpinnerStateInterface\n> {\n  public loadImagePromise: ICancelablePromise<HTMLImageElement> | null = null;\n\n  constructor(props: IBackgroundImageWithLoadingSpinnerPropsInterface) {\n    super(props);\n    this.state = {\n      isVisible: false\n    };\n  }\n\n  public componentDidMount() {\n    this.loadImagePromise = makePromiseCancelable(loadImage(this.props.src));\n    this.loadImagePromise.promise.then(() => {\n      this.setState({\n        isVisible: true\n      });\n    }, () => undefined);\n  }\n\n  public componentWillUnmount() {\n    if (this.loadImagePromise) {\n      this.loadImagePromise.cancel();\n    }\n  }\n\n  public getBackgroundImageStyle() {\n    return { backgroundImage: `url(${this.props.src})` };\n  }\n\n  public render() {\n    return !this.props.skipAnimation\n      ? (\n        <PoseGroup>\n          {\n            this.state.isVisible\n              ? <FadeInOutAnimation key='background-image-fade-in-out'\n                className='c-background-image-with-loading-spinner'\n                style={this.getBackgroundImageStyle()}>\n                { this.props.children }\n              </FadeInOutAnimation>\n              : <FadeInOutAnimation key='loading-spinner-fade-in-out'\n                className='c-background-image-with-loading-spinner'>\n                <LoadingSpinner />\n              </FadeInOutAnimation>\n          }\n        </PoseGroup>\n      )\n      : <div className='c-background-image-with-loading-spinner'\n          style={this.getBackgroundImageStyle()} />;\n  }\n}\n","import React, { FC, Fragment } from 'react';\nimport { IGroupedSelectOptions } from '@chrisb-dev/seasonal-shared-models';\nimport { BareButton, TextMedium, TextHeadingSmall } from '@chrisb-dev/seasonal-shared-frontend-components';\nimport './GroupedSelectBox.scss';\n\nexport const GroupedSelectBox: FC<{\n  groups: IGroupedSelectOptions[] | undefined,\n  onSelected?: (selectedValue: string) => void\n}> = ({\n  groups,\n  onSelected\n}) => (\n  <Fragment>\n  {\n    groups && groups.map((group) => (\n      <div className='c-grouped-select-box__group' key={group.groupName}>\n        <TextHeadingSmall className='c-grouped-select-box__group-name'>\n          {group.groupName}\n        </TextHeadingSmall>\n        {\n          group.selectOptions.map((option) =>\n            <BareButton\n              className={\n                'c-grouped-select-box__option'\n                + (option.isSelected\n                  ? ' c-grouped-select-box__option--selected'\n                  : ''\n                )\n              }\n              key={option.value}\n              onClick={() => onSelected && onSelected(option.value)}>\n              <TextMedium>{option.name}</TextMedium>\n            </BareButton>\n          )\n        }\n      </div>\n    ))\n  }\n  </Fragment>\n);\n","export * from './BackgroundImageWithLoadingSpinner/BackgroundImageWithLoadingSpinner';\n\nexport * from './GroupedSelectBox/GroupedSelectBox';\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst reselect_1 = require(\"reselect\");\nconst selectCurrentFoodDetailsState = (state) => state.currentFoodDetailsData;\nexports.selectIsCurrentFoodDetailsLoading = reselect_1.createSelector(selectCurrentFoodDetailsState, (currentFoodDetails) => currentFoodDetails.isLoading);\nexports.selectCurrentFoodDetails = reselect_1.createSelector(selectCurrentFoodDetailsState, (currentFoodDetails) => currentFoodDetails.data);\nexports.selectCurrentFoodDetailsId = reselect_1.createSelector(exports.selectCurrentFoodDetails, (currentFoodDetails) => currentFoodDetails &&\n    currentFoodDetails.id);\nexports.selectCurrentFoodDetailsName = reselect_1.createSelector(exports.selectCurrentFoodDetails, (currentFoodDetails) => currentFoodDetails &&\n    currentFoodDetails.name);\nexports.selectCurrentFoodDetailsImageUrl = reselect_1.createSelector(exports.selectCurrentFoodDetails, (currentFoodDetails) => currentFoodDetails &&\n    currentFoodDetails.imageUrlSmall);\nexports.selectCurrentFoodDetailsSeasons = reselect_1.createSelector(exports.selectCurrentFoodDetails, (currentFoodDetails) => currentFoodDetails &&\n    currentFoodDetails.seasons);\nexports.selectCurrentFoodDetailsRecipes = reselect_1.createSelector(exports.selectCurrentFoodDetails, (currentFoodDetails) => currentFoodDetails &&\n    [\n        ...(currentFoodDetails.primaryFoodInRecipe || []),\n        ...(currentFoodDetails.secondaryFoodInRecipe || [])\n    ]);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst reselect_1 = require(\"reselect\");\nconst selectAllBasicSeasonDataState = (state) => state.allBasicSeasonData;\nexports.selectIsBasicSeasonsLoading = reselect_1.createSelector(selectAllBasicSeasonDataState, (allBasicSeasonData) => allBasicSeasonData.isLoading);\nexports.selectAllBasicSeasons = reselect_1.createSelector(selectAllBasicSeasonDataState, (allBasicSeasonData) => allBasicSeasonData.data);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst reselect_1 = require(\"reselect\");\nconst selectAllSeasonsWithFoodState = (state) => state.allSeasonsWithFoodData;\nexports.selectIsAllSeasonsFoodLoading = reselect_1.createSelector(selectAllSeasonsWithFoodState, (allSeasonsWithFoodData) => allSeasonsWithFoodData.isFoodLoading);\nexports.selectIsAllSeasonsRecipesLoading = reselect_1.createSelector(selectAllSeasonsWithFoodState, (allSeasonsWithFoodData) => allSeasonsWithFoodData.isRecipesLoading);\nexports.selectAllSeasons = reselect_1.createSelector(selectAllSeasonsWithFoodState, (allSeasonsWithFoodData) => (allSeasonsWithFoodData.data));\nexports.selectNumberOfAllSeasonsInView = reselect_1.createSelector(selectAllSeasonsWithFoodState, (allSeasonsWithFoodData) => (allSeasonsWithFoodData.numberOfSeasonsInView));\nexports.selectHasMoreSeasonsInAllSeasonsView = reselect_1.createSelector(exports.selectNumberOfAllSeasonsInView, exports.selectAllSeasons, (numberOfAllSeasons, allSeasons) => (allSeasons\n    ? numberOfAllSeasons < allSeasons.length\n    : false));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst reselect_1 = require(\"reselect\");\nconst selectCountryState = (state) => state.countryData;\nexports.selectAreCountriesLoading = reselect_1.createSelector(selectCountryState, (countryState) => countryState.isLoading);\nexports.selectCountries = reselect_1.createSelector(selectCountryState, (countryState) => countryState.data);\nexports.selectAllRegions = reselect_1.createSelector(exports.selectCountries, (countries) => countries &&\n    countries.reduce((allRegions, nextCountry) => [\n        ...allRegions,\n        ...nextCountry.regions\n    ], []));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst reselect_1 = require(\"reselect\");\nconst selectCurrentSeasonWithFoodState = (state) => state.currentSeasonData;\nexports.selectIsCurrentSeasonFoodLoading = reselect_1.createSelector(selectCurrentSeasonWithFoodState, (currentSeasonData) => currentSeasonData.isFoodLoading);\nexports.selectIsCurrentSeasonRecipesLoading = reselect_1.createSelector(selectCurrentSeasonWithFoodState, (currentSeasonData) => currentSeasonData.isRecipesLoading);\nexports.selectCurrentSeason = reselect_1.createSelector(selectCurrentSeasonWithFoodState, (currentSeasonData) => currentSeasonData.data);\nexports.selectCurrentSeasonFood = reselect_1.createSelector(exports.selectCurrentSeason, (currentSeason) => currentSeason && currentSeason.food);\nexports.selectCurrentSeasonRecipes = reselect_1.createSelector(exports.selectCurrentSeason, (currentSeason) => currentSeason &&\n    currentSeason.recipes);\nexports.selectCurrentSeasonRecipesById = (recipeId) => (reselect_1.createSelector(exports.selectCurrentSeasonRecipes, (recipes) => recipes && recipes.find(({ id }) => (id === recipeId))));\nexports.selectCurrentSeasonIndex = reselect_1.createSelector(selectCurrentSeasonWithFoodState, (currentSeasonData) => currentSeasonData.currentSeasonIndex);\nexports.selectCurrentSeasonName = reselect_1.createSelector(exports.selectCurrentSeason, (currentSeason) => currentSeason && currentSeason.name);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst reselect_1 = require(\"reselect\");\nexports.selectSettingsState = (state) => state.settings;\nexports.selectSettingsDietType = reselect_1.createSelector(exports.selectSettingsState, (settings) => settings.dietType);\nexports.selectSettingsRegionCode = reselect_1.createSelector(exports.selectSettingsState, (settings) => settings.selectedRegionCode);\nexports.selectSettingsUserId = reselect_1.createSelector(exports.selectSettingsState, (settings) => settings.userId);\nexports.selectSettingsTimesAppStarted = reselect_1.createSelector(exports.selectSettingsState, (settings) => settings.timesAppStarted);\n","import React, { FC } from 'react';\n\nimport './ImageGrid.scss';\n\nimport {\n  ImageGridItem\n} from '../ImageGridItem/ImageGridItem';\nimport { IImageGrid } from './ImageGrid.interface';\nimport { TextMedium } from '@chrisb-dev/seasonal-shared-frontend-components';\n\nexport const ImageGrid: FC<IImageGrid> = ({\n  data,\n  onClick,\n  skipAnimation\n}) => (\n  <div className='c-image-grid'>\n    {\n      data && data.length\n        ? data.map((item) => (\n          <ImageGridItem\n            key={item.name}\n            {...item}\n            onClick={onClick}\n            skipAnimation={skipAnimation}/>\n        ))\n        : <TextMedium className='c-image-grid__no-results'>\n            No results found\n          </TextMedium>\n    }\n  </div>\n);\n","import React, { FC } from 'react';\n\nimport './SummaryColumn.scss';\n\nimport {\n  TextMedium,\n  TextHeadingSmall\n} from '@chrisb-dev/seasonal-shared-frontend-components';\n\nimport {\n  ISummaryColumn\n} from './SummaryColumn.interface';\n\nexport const SummaryColumn: FC<ISummaryColumn> = ({\n  imageUrl,\n  text,\n  title\n}) => (\n  <div className='c-summary-column'>\n    {\n      imageUrl && <img\n        alt='Column item'\n        src={imageUrl} className='c-summary-column__image' />\n    }\n    <h3 className='c-summary-column__heading'>\n      <TextHeadingSmall>\n        { title }\n      </TextHeadingSmall>\n    </h3>\n    <TextMedium>\n      { text }\n    </TextMedium>\n  </div>\n);\n","export * from './SummaryColumnList.interface';\n\nexport * from './SummaryColumnList';\n","import React, { FC } from 'react';\n\nimport './SummaryColumnList.scss';\n\nimport {\n  SummaryColumn\n} from './../SummaryColumn';\n\nimport {\n  ISummaryColumnList\n} from './SummaryColumnList.interface';\n\nexport const SummaryColumnList: FC<ISummaryColumnList> = ({\n  columns\n}) => (\n  <ul className='c-summary-column-list'>\n    {\n      columns.map((column, index) => (\n        <SummaryColumn {...column} key={index} />\n      ))\n    }\n  </ul>\n);\n","import React, { FC } from 'react';\nimport './SeasonNameView.scss';\nimport {\n  ISeasonNameViewProps\n} from './SeasonNameView.interface';\nimport { TextHeadingSmall } from '@chrisb-dev/seasonal-shared-frontend-components';\n\nexport const SeasonNameView: FC<ISeasonNameViewProps> = ({\n  name\n}) => (\n  <TextHeadingSmall className='c-season-name-view'>\n    {name}\n  </TextHeadingSmall>\n);\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./all-basic-season.actions\"));\n__export(require(\"./all-season-with-food.actions\"));\n__export(require(\"./all-seasons-with-recipes.actions\"));\n__export(require(\"./country.actions\"));\n__export(require(\"./current-food-details.actions\"));\n__export(require(\"./current-season.actions\"));\n__export(require(\"./settings.actions\"));\n__export(require(\"./init.actions\"));\n__export(require(\"./season-name.actions\"));\n__export(require(\"./ui.actions\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SET_ALL_BASIC_SEASONS_START = 'SET_ALL_BASIC_SEASON_START';\nfunction setAllSeasonsStart() {\n    return {\n        type: exports.SET_ALL_BASIC_SEASONS_START\n    };\n}\nexports.setAllSeasonsStart = setAllSeasonsStart;\nexports.SET_ALL_BASIC_SEASONS_SUCCESS = 'SET_ALL_BASIC_SEASONS_SUCCESS';\nfunction setAllBasicSeasonsSuccess(seasonData) {\n    return {\n        seasonData,\n        type: exports.SET_ALL_BASIC_SEASONS_SUCCESS\n    };\n}\nexports.setAllBasicSeasonsSuccess = setAllBasicSeasonsSuccess;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SET_ALL_SEASONS_WITH_FOOD_START = 'SET_ALL_SEASONS_WITH_FOOD_START';\nfunction setAllSeasonsWithFoodStart() {\n    return {\n        type: exports.SET_ALL_SEASONS_WITH_FOOD_START\n    };\n}\nexports.setAllSeasonsWithFoodStart = setAllSeasonsWithFoodStart;\nexports.SET_ALL_SEASONS_WITH_FOOD_SUCCESS = 'SET_ALL_SEASONS_WITH_FOOD_SUCCESS';\nfunction setAllSeasonsWithFoodSuccess(seasonData) {\n    return {\n        seasonData,\n        type: exports.SET_ALL_SEASONS_WITH_FOOD_SUCCESS\n    };\n}\nexports.setAllSeasonsWithFoodSuccess = setAllSeasonsWithFoodSuccess;\nexports.INCREASE_NUMBER_OF_ALL_FOOD_SEASONS_IN_VIEW = 'INCREASE_NUMBER_OF_ALL_FOOD_SEASONS_IN_VIEW';\nfunction increaseNumberOfAllFoodSeasonsInView() {\n    return {\n        type: exports.INCREASE_NUMBER_OF_ALL_FOOD_SEASONS_IN_VIEW\n    };\n}\nexports.increaseNumberOfAllFoodSeasonsInView = increaseNumberOfAllFoodSeasonsInView;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SET_ALL_SEASONS_WITH_RECIPES_START = 'SET_ALL_SEASONS_WITH_RECIPES_START';\nfunction setAllSeasonsWithRecipesStart() {\n    return {\n        type: exports.SET_ALL_SEASONS_WITH_RECIPES_START\n    };\n}\nexports.setAllSeasonsWithRecipesStart = setAllSeasonsWithRecipesStart;\nexports.SET_ALL_SEASONS_WITH_RECIPES_SUCCESS = 'SET_ALL_SEASONS_WITH_RECIPES_SUCCESS';\nfunction setAllSeasonsWithRecipesSuccess(seasonData) {\n    return {\n        seasonData,\n        type: exports.SET_ALL_SEASONS_WITH_RECIPES_SUCCESS\n    };\n}\nexports.setAllSeasonsWithRecipesSuccess = setAllSeasonsWithRecipesSuccess;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GET_COUNTRIES_START = 'GET_COUNTRIES_START';\nfunction getCountriesStart() {\n    return {\n        type: exports.GET_COUNTRIES_START\n    };\n}\nexports.getCountriesStart = getCountriesStart;\nexports.GET_COUNTRIES_SUCCESS = 'GET_COUNTRIES_SUCCESS';\nfunction getCountriesSuccess(countries) {\n    return {\n        countries,\n        type: exports.GET_COUNTRIES_SUCCESS\n    };\n}\nexports.getCountriesSuccess = getCountriesSuccess;\nexports.SET_REGION = 'SET_REGION';\nfunction setRegion(regionCode) {\n    return {\n        regionCode,\n        type: exports.SET_REGION\n    };\n}\nexports.setRegion = setRegion;\nexports.USER_REGION_DETECTED = 'USER_REGION_DETECTED';\nfunction userRegionDetected(regionCode, error) {\n    return {\n        error,\n        regionCode,\n        type: exports.USER_REGION_DETECTED\n    };\n}\nexports.userRegionDetected = userRegionDetected;\nexports.SET_USER_REGION_DETECTED = 'SET_USER_REGION_DETECTED';\nfunction setUserRegionDetected(regionCode) {\n    return {\n        regionCode,\n        type: exports.SET_USER_REGION_DETECTED\n    };\n}\nexports.setUserRegionDetected = setUserRegionDetected;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SET_CURRENT_FOOD_DETAILS_START = 'SET_CURRENT_FOOD_DETAILS_START';\nfunction setCurrentFoodDetailsStart(foodItemId) {\n    return {\n        foodItemId,\n        type: exports.SET_CURRENT_FOOD_DETAILS_START\n    };\n}\nexports.setCurrentFoodDetailsStart = setCurrentFoodDetailsStart;\nexports.SET_CURRENT_FOOD_DETAILS_ON_DIET_CHANGE = 'SET_CURRENT_FOOD_DETAILS_ON_DIET_CHANGE';\nfunction setCurrentFoodDetailsOnDietChange(foodItemId) {\n    return {\n        foodItemId,\n        type: exports.SET_CURRENT_FOOD_DETAILS_ON_DIET_CHANGE\n    };\n}\nexports.setCurrentFoodDetailsOnDietChange = setCurrentFoodDetailsOnDietChange;\nexports.SET_CURRENT_FOOD_DETAILS_SUCCESS = 'SET_CURRENT_FOOD_DETAILS_SUCCESS';\nfunction setCurrentFoodDetailsSuccess(currentFoodData) {\n    return {\n        currentFoodDetailsData: currentFoodData,\n        type: exports.SET_CURRENT_FOOD_DETAILS_SUCCESS\n    };\n}\nexports.setCurrentFoodDetailsSuccess = setCurrentFoodDetailsSuccess;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SET_CURRENT_SEASON_WITH_FOOD_START = 'SET_CURRENT_SEASON_WITH_FOOD_START';\nfunction setCurrentSeasonWithFoodStart() {\n    return {\n        type: exports.SET_CURRENT_SEASON_WITH_FOOD_START\n    };\n}\nexports.setCurrentSeasonWithFoodStart = setCurrentSeasonWithFoodStart;\nexports.SET_CURRENT_SEASON_WITH_FOOD_SUCCESS = 'SET_CURRENT_SEASON_WITH_FOOD_SUCCESS';\nfunction setCurrentSeasonWithFoodSuccess(currentSeasonData) {\n    return {\n        currentSeasonData,\n        type: exports.SET_CURRENT_SEASON_WITH_FOOD_SUCCESS\n    };\n}\nexports.setCurrentSeasonWithFoodSuccess = setCurrentSeasonWithFoodSuccess;\nexports.SET_CURRENT_SEASON_WITH_RECIPES_START = 'SET_CURRENT_SEASON_WITH_RECIPES_START';\nfunction setCurrentSeasonWithRecipesStart() {\n    return {\n        type: exports.SET_CURRENT_SEASON_WITH_RECIPES_START\n    };\n}\nexports.setCurrentSeasonWithRecipesStart = setCurrentSeasonWithRecipesStart;\nexports.SET_CURRENT_SEASON_WITH_RECIPES_SUCCESS = 'SET_CURRENT_SEASON_WITH_RECIPES_SUCCESS';\nfunction setCurrentSeasonWithRecipesSuccess(currentSeasonData) {\n    return {\n        currentSeasonData,\n        type: exports.SET_CURRENT_SEASON_WITH_RECIPES_SUCCESS\n    };\n}\nexports.setCurrentSeasonWithRecipesSuccess = setCurrentSeasonWithRecipesSuccess;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.INIT_SETTINGS = 'INIT_SETTINGS';\nfunction initSettings(settings) {\n    return {\n        settings,\n        type: exports.INIT_SETTINGS\n    };\n}\nexports.initSettings = initSettings;\nexports.SET_DIET_TYPE = 'SET_DIET_TYPE';\nfunction setDietType(dietType) {\n    return {\n        dietType,\n        type: exports.SET_DIET_TYPE\n    };\n}\nexports.setDietType = setDietType;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.INIT_APP = 'INIT_APP';\nfunction initApp() {\n    return {\n        type: exports.INIT_APP\n    };\n}\nexports.initApp = initApp;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SET_SELECTED_SEASON_NAME = 'SET_SELECTED_SEASON_NAME';\nfunction setSelectedSeasonName(seasonName) {\n    return {\n        seasonName,\n        type: exports.SET_SELECTED_SEASON_NAME\n    };\n}\nexports.setSelectedSeasonName = setSelectedSeasonName;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OPEN_MENU = 'OPEN_MENU';\nfunction openMenu() {\n    return {\n        type: exports.OPEN_MENU\n    };\n}\nexports.openMenu = openMenu;\nexports.CLOSE_MENU = 'CLOSE_MENU';\nfunction closeMenu() {\n    return {\n        type: exports.CLOSE_MENU\n    };\n}\nexports.closeMenu = closeMenu;\nexports.SELECT_SEASON = 'SELECT_SEASON';\nfunction selectSeason(seasonIndex) {\n    return {\n        seasonIndex,\n        type: exports.SELECT_SEASON\n    };\n}\nexports.selectSeason = selectSeason;\nexports.GO_TO_ALL_SEASONS_VIEW = 'GO_TO_ALL_SEASONS_VIEW';\nfunction goToAllSeasonsView() {\n    return {\n        type: exports.GO_TO_ALL_SEASONS_VIEW\n    };\n}\nexports.goToAllSeasonsView = goToAllSeasonsView;\nexports.GO_TO_SETTINGS_PAGE = 'GO_TO_SETTINGS_PAGE';\nfunction goToSettingsPage() {\n    return {\n        type: exports.GO_TO_SETTINGS_PAGE\n    };\n}\nexports.goToSettingsPage = goToSettingsPage;\nexports.GO_BACK_FROM_SETTINGS_PAGE = 'GO_BACK_FROM_SETTINGS_PAGE';\nfunction goBackFromSettingsPage() {\n    return {\n        type: exports.GO_BACK_FROM_SETTINGS_PAGE\n    };\n}\nexports.goBackFromSettingsPage = goBackFromSettingsPage;\nexports.FOOD_DETAILS_SELECT_SEASON = 'FOOD_DETAILS_SELECT_SEASON';\nfunction foodDetailsSelectSeason(seasonIndex) {\n    return {\n        seasonIndex,\n        type: exports.FOOD_DETAILS_SELECT_SEASON\n    };\n}\nexports.foodDetailsSelectSeason = foodDetailsSelectSeason;\nexports.SEARCH_BAR_CHANGED = 'SEARCH_BAR_CHANGED';\nfunction searchBarChanged(newSearchTerm) {\n    return {\n        newSearchTerm,\n        type: exports.SEARCH_BAR_CHANGED\n    };\n}\nexports.searchBarChanged = searchBarChanged;\nexports.SHOW_SEARCH_BAR = 'SHOW_SEARCH_BAR';\nfunction showSearchBar() {\n    return {\n        type: exports.SHOW_SEARCH_BAR\n    };\n}\nexports.showSearchBar = showSearchBar;\nexports.HIDE_SEARCH_BAR = 'HIDE_SEARCH_BAR';\nfunction hideSearchBar() {\n    return {\n        type: exports.HIDE_SEARCH_BAR\n    };\n}\nexports.hideSearchBar = hideSearchBar;\nexports.FOOD_ITEM_CLICKED = 'FOOD_ITEM_CLICKED';\nfunction foodItemClicked(foodItemId) {\n    return {\n        foodItemId,\n        type: exports.FOOD_ITEM_CLICKED\n    };\n}\nexports.foodItemClicked = foodItemClicked;\nexports.RECIPE_ITEM_CLICKED = 'RECIPE_ITEM_CLICKED';\nfunction recipeItemClicked(recipeItemId) {\n    return {\n        recipeItemId,\n        type: exports.RECIPE_ITEM_CLICKED\n    };\n}\nexports.recipeItemClicked = recipeItemClicked;\nexports.FOOD_DETAILS_SELECT_RECIPE = 'FOOD_DETAILS_SELECT_RECIPE';\nfunction foodDetailsSelectRecipe(recipeItemId) {\n    return {\n        recipeItemId,\n        type: exports.FOOD_DETAILS_SELECT_RECIPE\n    };\n}\nexports.foodDetailsSelectRecipe = foodDetailsSelectRecipe;\nexports.SHOW_LOCATION_SETTINGS_POPUP = 'SHOW_LOCATION_SETTINGS_POPUP';\nfunction showLocationPopup() {\n    return {\n        type: exports.SHOW_LOCATION_SETTINGS_POPUP\n    };\n}\nexports.showLocationPopup = showLocationPopup;\nexports.CLOSE_LOCATION_SETTINGS_POPUP = 'CLOSE_LOCATION_SETTINGS_POPUP';\nfunction closeLocationPopup() {\n    return {\n        type: exports.CLOSE_LOCATION_SETTINGS_POPUP\n    };\n}\nexports.closeLocationPopup = closeLocationPopup;\nexports.HIDE_REGION_CHANGE_PROMPT = 'HIDE_REGION_CHANGE_PROMPT';\nfunction hideRegionChangePrompt() {\n    return {\n        type: exports.HIDE_REGION_CHANGE_PROMPT\n    };\n}\nexports.hideRegionChangePrompt = hideRegionChangePrompt;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./all-seasons-with-food-and-search.selectors\"));\n__export(require(\"./current-country.selectors\"));\n__export(require(\"./current-food-data-and-basic-season.selectors\"));\n__export(require(\"./current-food-details-data-with-search.selectors\"));\n__export(require(\"./current-season-data-with-search.selectors\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst reselect_1 = require(\"reselect\");\nconst all_seasons_with_food_selectors_1 = require(\"../all-seasons-with-food.selectors\");\nconst seasonal_shared_frontend_utilities_1 = require(\"@chrisb-dev/seasonal-shared-frontend-utilities\");\nconst ui_selectors_1 = require(\"../ui.selectors\");\nexports.selectAllSeasonsWithFoodAndSearchAppliedData = reselect_1.createSelector(all_seasons_with_food_selectors_1.selectAllSeasons, ui_selectors_1.selectCurrentSearchTerm, (seasons, searchTerm) => (seasons && seasons.map((season) => (Object.assign(Object.assign({}, season), { food: seasonal_shared_frontend_utilities_1.getDataThatContainsSearchTerm(searchTerm, season.food) })))));\nexports.selectAllSeasonsVisibleFoodData = reselect_1.createSelector(exports.selectAllSeasonsWithFoodAndSearchAppliedData, ui_selectors_1.selectCurrentSearchTerm, all_seasons_with_food_selectors_1.selectNumberOfAllSeasonsInView, (seasonsWithSearchApplied, searchTerm, numberOfSeasonsInView) => (seasonsWithSearchApplied &&\n    (searchTerm\n        ? seasonsWithSearchApplied\n        : seasonsWithSearchApplied.slice(0, numberOfSeasonsInView)).filter(({ food }) => food && food.length > 0)));\nexports.selectFoodInSeasonGraphData = reselect_1.createSelector(exports.selectAllSeasonsWithFoodAndSearchAppliedData, (allSeasonData) => (allSeasonData && allSeasonData.map(({ name, food }) => ({\n    'Number of food items in season': food\n        ? food.length\n        : 0,\n    'name': name\n}))));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst convertDegressToRadians = (deg) => deg * (Math.PI / 180);\nconst distanceBetweenLatLngInKm = (latLng1, latLng2) => {\n    const dLat = convertDegressToRadians(latLng2.lat - latLng1.lat);\n    const dLng = convertDegressToRadians(latLng2.lng - latLng1.lng);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2)\n        + Math.cos(convertDegressToRadians(latLng1.lat))\n            * Math.cos(convertDegressToRadians(latLng2.lat))\n            * Math.sin(dLng / 2)\n            * Math.sin(dLng / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const radiusOfEarthInKm = 6371;\n    return radiusOfEarthInKm * c;\n};\nexports.getNearestRegionFromLatLng = (regions, latLng) => regions && regions.reduce((prevRegion, nextRegion) => (distanceBetweenLatLngInKm(latLng, prevRegion.latLng)\n    < distanceBetweenLatLngInKm(latLng, nextRegion.latLng)\n    ? prevRegion\n    : nextRegion));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getDataThatContainsSearchTerm = (searchTerm, data) => data && data.filter(({ name }) => (!searchTerm || name.toLowerCase().includes(searchTerm)));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst seasonal_shared_models_1 = require(\"@chrisb-dev/seasonal-shared-models\");\nconst getQueryString = (isVegetarian, isVegan, countryCode) => {\n    const query = [\n        isVegetarian && 'is-vegetarian=true',\n        isVegan && 'is-vegan=true',\n        countryCode && `country-code=${countryCode}`\n    ].filter(Boolean).join('&');\n    const queryString = query && `?${query}`;\n    return queryString;\n};\nexports.getCurrentSeasonIndex = () => new Date().getUTCMonth();\nexports.getAllSeasons = (countryCode) => {\n    const queryString = getQueryString(undefined, undefined, countryCode);\n    return fetch(`${seasonal_shared_models_1.SEASON_URL}${queryString}`).then((resp) => resp.json());\n};\nexports.getSeasonWithFood = (seasonIndex, countryCode) => {\n    const queryString = getQueryString(undefined, undefined, countryCode);\n    return fetch(`${seasonal_shared_models_1.SEASON_WITH_FOOD_URL}/${seasonIndex}${queryString}`).then((resp) => resp.json());\n};\nexports.getAllSeasonsWithFood = (countryCode) => {\n    const queryString = getQueryString(undefined, undefined, countryCode);\n    return fetch(`${seasonal_shared_models_1.SEASON_WITH_FOOD_URL}${queryString}`)\n        .then((resp) => resp.json());\n};\nexports.getSeasonWithRecipes = (seasonIndex, isVegetarian, isVegan, countryCode) => {\n    const queryString = getQueryString(isVegetarian, isVegan, countryCode);\n    return fetch(`${seasonal_shared_models_1.SEASON_WITH_RECIPES_URL}/${seasonIndex}${queryString}`).then((resp) => resp.json());\n};\nexports.getAllSeasonsWithRecipes = (countryCode) => {\n    const queryString = getQueryString(undefined, undefined, countryCode);\n    return fetch(`${seasonal_shared_models_1.SEASON_WITH_RECIPES_URL}${queryString}`)\n        .then((resp) => resp.json());\n};\nexports.getFoodDetailsData = (foodId, isVegetarian, isVegan, countryCode) => {\n    const queryString = getQueryString(isVegetarian, isVegan, countryCode);\n    return fetch(`${seasonal_shared_models_1.FOOD_DETAILS_URL}/${foodId}${queryString}`)\n        .then((resp) => resp.json());\n};\nexports.getCountries = () => (fetch(seasonal_shared_models_1.COUNTRY_URL).then((resp) => resp.json()));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./diet-type.enum\"));\n__export(require(\"./user-roles.enum\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DIET_TYPE;\n(function (DIET_TYPE) {\n    DIET_TYPE[\"VEGETARIAN\"] = \"VEGETARIAN\";\n    DIET_TYPE[\"VEGAN\"] = \"VEGAN\";\n    DIET_TYPE[\"ALL\"] = \"ALL\";\n})(DIET_TYPE = exports.DIET_TYPE || (exports.DIET_TYPE = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar USER_ROLES;\n(function (USER_ROLES) {\n    USER_ROLES[\"ADMIN\"] = \"admin\";\n    USER_ROLES[\"EDITOR\"] = \"editor\";\n})(USER_ROLES = exports.USER_ROLES || (exports.USER_ROLES = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst BACKEND_URL = process.env.BACKEND_URL\n    || process.env.REACT_APP_BACKEND_URL\n    || 'https://6usraevcmc.execute-api.eu-west-2.amazonaws.com/prod/v2';\nexports.SEASON_URL = process.env.SEASON_URL || `${BACKEND_URL}/season`;\nexports.FOOD_DETAILS_URL = process.env.FOOD_DETAILS_URL || `${BACKEND_URL}/food`;\nexports.SEASON_WITH_FOOD_URL = process.env.SEASON_WITH_FOOD_URL || `${BACKEND_URL}/season-with-food`;\nexports.SEASON_WITH_RECIPES_URL = process.env.SEASON_WITH_RECIPES_URL || `${BACKEND_URL}/season-with-recipes`;\nexports.COUNTRY_URL = process.env.COUNTRY_URL || `${BACKEND_URL}/country`;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst reselect_1 = require(\"reselect\");\nconst country_selectors_1 = require(\"../country.selectors\");\nconst settings_selectors_1 = require(\"../settings.selectors\");\nexports.selectCurrentRegion = reselect_1.createSelector(country_selectors_1.selectAllRegions, settings_selectors_1.selectSettingsRegionCode, (allRegions, regionCode) => (allRegions &&\n    allRegions.find((region) => region.code === regionCode)));\nexports.selectCountryAndRegionsSelectGroup = reselect_1.createSelector(country_selectors_1.selectCountries, settings_selectors_1.selectSettingsRegionCode, (countries, regionCode) => (countries && countries.map((country) => ({\n    groupName: country.name,\n    selectOptions: country.regions.map((region) => ({\n        isSelected: region.code === regionCode,\n        name: region.name,\n        value: region.code\n    }))\n}))));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst reselect_1 = require(\"reselect\");\nconst current_food_details_selectors_1 = require(\"../current-food-details.selectors\");\nconst all_basic_season_selectors_1 = require(\"../all-basic-season.selectors\");\nexports.selectIsFoodDataOrBasicSeasonsLoading = reselect_1.createSelector(current_food_details_selectors_1.selectIsCurrentFoodDetailsLoading, all_basic_season_selectors_1.selectIsBasicSeasonsLoading, (isCurrentFoodDetailsLoading, isBasicSeasonDataLoading) => (isCurrentFoodDetailsLoading || isBasicSeasonDataLoading));\nexports.selectSeasonsSelectedForFood = reselect_1.createSelector(current_food_details_selectors_1.selectCurrentFoodDetailsSeasons, all_basic_season_selectors_1.selectAllBasicSeasons, (foodDetailsSeasons, basicSeasons) => (foodDetailsSeasons && basicSeasons &&\n    basicSeasons.map(({ id, name }) => ({\n        isSelected: foodDetailsSeasons\n            .some((foodDetailSeason) => foodDetailSeason.id === id),\n        name\n    }))));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst reselect_1 = require(\"reselect\");\nconst ui_selectors_1 = require(\"../ui.selectors\");\nconst seasonal_shared_frontend_utilities_1 = require(\"@chrisb-dev/seasonal-shared-frontend-utilities\");\nconst current_food_details_selectors_1 = require(\"../current-food-details.selectors\");\nexports.selectVisibleRecipesForFoodDetailsData = reselect_1.createSelector(ui_selectors_1.selectCurrentSearchTerm, current_food_details_selectors_1.selectCurrentFoodDetailsRecipes, (searchTerm, recipes) => seasonal_shared_frontend_utilities_1.getDataThatContainsSearchTerm(searchTerm, recipes));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst reselect_1 = require(\"reselect\");\nconst ui_selectors_1 = require(\"../ui.selectors\");\nconst current_season_selectors_1 = require(\"../current-season.selectors\");\nconst seasonal_shared_frontend_utilities_1 = require(\"@chrisb-dev/seasonal-shared-frontend-utilities\");\nexports.selectVisibleFoodData = reselect_1.createSelector(ui_selectors_1.selectCurrentSearchTerm, current_season_selectors_1.selectCurrentSeasonFood, (searchTerm, food) => seasonal_shared_frontend_utilities_1.getDataThatContainsSearchTerm(searchTerm, food));\nexports.selectVisibleRecipeData = reselect_1.createSelector(ui_selectors_1.selectCurrentSearchTerm, current_season_selectors_1.selectCurrentSeasonRecipes, (searchTerm, recipes) => seasonal_shared_frontend_utilities_1.getDataThatContainsSearchTerm(searchTerm, recipes));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst current_season_with_food_epics_1 = require(\"./current-season-with-food.epics\");\nconst current_season_with_recipes_epics_1 = require(\"./current-season-with-recipes.epics\");\nconst init_epics_1 = require(\"./init.epics\");\nconst all_basic_season_epics_1 = require(\"./all-basic-season.epics\");\nconst all_seasons_with_food_epic_1 = require(\"./all-seasons-with-food.epic\");\nconst all_seasons_with_recipes_epic_1 = require(\"./all-seasons-with-recipes.epic\");\nconst current_food_details_epics_1 = require(\"./current-food-details.epics\");\nconst season_name_epics_1 = require(\"./season-name.epics\");\nconst country_epics_1 = require(\"./country.epics\");\nexports.rootEpics = [\n    init_epics_1.initAppEpic$,\n    current_season_with_food_epics_1.getCurrentSeasonWithFoodStartEpic$,\n    current_season_with_food_epics_1.getCurrentSeasonWithFoodEpic$,\n    current_season_with_recipes_epics_1.getCurrentSeasonWithRecipesStartEpic$,\n    current_season_with_recipes_epics_1.getCurrentSeasonWithRecipesEpic$,\n    all_basic_season_epics_1.getAllBasicSeasonsStartEpic$,\n    all_basic_season_epics_1.getAllBasicSeasonsEpic$,\n    all_seasons_with_food_epic_1.getAllSeasonsWithFood$,\n    all_seasons_with_recipes_epic_1.getAllSeasonsWithRecipes$,\n    current_food_details_epics_1.getCurrentFoodDetailsEpic$,\n    current_food_details_epics_1.updateFoodDetailsOnDietTypeChangeEpic$,\n    season_name_epics_1.setSeasonSelectedSeasonName$,\n    country_epics_1.getCountriesStart$,\n    country_epics_1.getCountries$,\n    country_epics_1.promptCountryChangeOnNewDetected$,\n    country_epics_1.hideRegionChangePrompt$\n];\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst redux_observable_1 = require(\"redux-observable\");\nconst seasonal_shared_frontend_utilities_1 = require(\"@chrisb-dev/seasonal-shared-frontend-utilities\");\nconst actions_1 = require(\"../actions\");\nconst operators_1 = require(\"rxjs/operators\");\nconst selectors_1 = require(\"../selectors\");\nexports.getCurrentSeasonWithFoodStartEpic$ = (actions$) => (actions$.pipe(redux_observable_1.ofType(actions_1.SELECT_SEASON, actions_1.INIT_SETTINGS, actions_1.FOOD_DETAILS_SELECT_SEASON, actions_1.SET_USER_REGION_DETECTED, actions_1.SET_REGION), operators_1.mapTo(actions_1.setCurrentSeasonWithFoodStart())));\nexports.getCurrentSeasonWithFoodEpic$ = (actions$, state$) => (actions$.pipe(redux_observable_1.ofType(actions_1.SET_CURRENT_SEASON_WITH_FOOD_START), operators_1.withLatestFrom(state$), operators_1.map(([, state]) => ({\n    regionCode: selectors_1.selectSettingsRegionCode(state),\n    seasonIndex: selectors_1.selectCurrentSeasonIndex(state)\n})), operators_1.switchMap(({ regionCode, seasonIndex }) => (seasonal_shared_frontend_utilities_1.getSeasonWithFood(seasonIndex, regionCode))), operators_1.map((foodData) => actions_1.setCurrentSeasonWithFoodSuccess(foodData))));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst redux_observable_1 = require(\"redux-observable\");\nconst seasonal_shared_frontend_utilities_1 = require(\"@chrisb-dev/seasonal-shared-frontend-utilities\");\nconst actions_1 = require(\"../actions\");\nconst operators_1 = require(\"rxjs/operators\");\nconst seasonal_shared_models_1 = require(\"@chrisb-dev/seasonal-shared-models\");\nconst selectors_1 = require(\"../selectors\");\nexports.getCurrentSeasonWithRecipesStartEpic$ = (actions$) => (actions$.pipe(redux_observable_1.ofType(actions_1.SELECT_SEASON, actions_1.INIT_SETTINGS, actions_1.FOOD_DETAILS_SELECT_SEASON, actions_1.SET_DIET_TYPE, actions_1.SET_USER_REGION_DETECTED, actions_1.SET_REGION), operators_1.mapTo(actions_1.setCurrentSeasonWithRecipesStart())));\nexports.getCurrentSeasonWithRecipesEpic$ = (actions$, state$) => (actions$.pipe(redux_observable_1.ofType(actions_1.SET_CURRENT_SEASON_WITH_RECIPES_START), operators_1.withLatestFrom(state$), operators_1.map(([, state]) => ({\n    dietType: selectors_1.selectSettingsDietType(state),\n    regionCode: selectors_1.selectSettingsRegionCode(state),\n    seasonIndex: selectors_1.selectCurrentSeasonIndex(state)\n})), operators_1.switchMap(({ seasonIndex, regionCode, dietType }) => (seasonal_shared_frontend_utilities_1.getSeasonWithRecipes(seasonIndex, dietType === seasonal_shared_models_1.DIET_TYPE.VEGETARIAN, dietType === seasonal_shared_models_1.DIET_TYPE.VEGAN, regionCode))), operators_1.map((recipesData) => actions_1.setCurrentSeasonWithRecipesSuccess(recipesData))));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst actions_1 = require(\"../actions\");\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nexports.initAppEpic$ = () => (rxjs_1.of(null).pipe(operators_1.mapTo(actions_1.initApp())));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst redux_observable_1 = require(\"redux-observable\");\nconst seasonal_shared_frontend_utilities_1 = require(\"@chrisb-dev/seasonal-shared-frontend-utilities\");\nconst actions_1 = require(\"../actions\");\nconst operators_1 = require(\"rxjs/operators\");\nconst selectors_1 = require(\"../selectors\");\nexports.getAllBasicSeasonsStartEpic$ = (actions$) => (actions$.pipe(redux_observable_1.ofType(actions_1.INIT_SETTINGS, actions_1.SET_REGION, actions_1.SET_USER_REGION_DETECTED), operators_1.mapTo(actions_1.setAllSeasonsStart())));\nexports.getAllBasicSeasonsEpic$ = (actions$, state$) => (actions$.pipe(redux_observable_1.ofType(actions_1.SET_ALL_BASIC_SEASONS_START), operators_1.withLatestFrom(state$), operators_1.map(([, state]) => selectors_1.selectSettingsRegionCode(state)), operators_1.switchMap((regionCode) => seasonal_shared_frontend_utilities_1.getAllSeasons(regionCode)), operators_1.map((seasonData) => actions_1.setAllBasicSeasonsSuccess(seasonData))));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst redux_observable_1 = require(\"redux-observable\");\nconst seasonal_shared_frontend_utilities_1 = require(\"@chrisb-dev/seasonal-shared-frontend-utilities\");\nconst actions_1 = require(\"../actions\");\nconst operators_1 = require(\"rxjs/operators\");\nconst selectors_1 = require(\"../selectors\");\nexports.getAllSeasonsWithFood$ = (actions$, state$) => (actions$.pipe(redux_observable_1.ofType(actions_1.SET_ALL_SEASONS_WITH_FOOD_START), operators_1.withLatestFrom(state$), operators_1.map(([, state]) => selectors_1.selectSettingsRegionCode(state)), operators_1.switchMap((regionCode) => seasonal_shared_frontend_utilities_1.getAllSeasonsWithFood(regionCode)), operators_1.map((seasonData) => actions_1.setAllSeasonsWithFoodSuccess(seasonData))));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst redux_observable_1 = require(\"redux-observable\");\nconst seasonal_shared_frontend_utilities_1 = require(\"@chrisb-dev/seasonal-shared-frontend-utilities\");\nconst actions_1 = require(\"../actions\");\nconst operators_1 = require(\"rxjs/operators\");\nconst selectors_1 = require(\"../selectors\");\nexports.getAllSeasonsWithRecipes$ = (actions$, state$) => (actions$.pipe(redux_observable_1.ofType(actions_1.SET_ALL_SEASONS_WITH_RECIPES_START), operators_1.withLatestFrom(state$), operators_1.map(([, state]) => selectors_1.selectSettingsRegionCode(state)), operators_1.switchMap((regionCode) => seasonal_shared_frontend_utilities_1.getAllSeasonsWithRecipes(regionCode)), operators_1.map((seasonData) => actions_1.setAllSeasonsWithRecipesSuccess(seasonData))));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst redux_observable_1 = require(\"redux-observable\");\nconst seasonal_shared_frontend_utilities_1 = require(\"@chrisb-dev/seasonal-shared-frontend-utilities\");\nconst actions_1 = require(\"../actions\");\nconst operators_1 = require(\"rxjs/operators\");\nconst seasonal_shared_models_1 = require(\"@chrisb-dev/seasonal-shared-models\");\nconst selectors_1 = require(\"../selectors\");\nexports.updateFoodDetailsOnDietTypeChangeEpic$ = (actions$, state$) => (actions$.pipe(redux_observable_1.ofType(actions_1.SET_DIET_TYPE), operators_1.withLatestFrom(state$), operators_1.map(([, state]) => selectors_1.selectCurrentFoodDetailsId(state)), operators_1.filter((currentFoodDetailsId) => Boolean(currentFoodDetailsId)), operators_1.map((currentFoodDetailsId) => (actions_1.setCurrentFoodDetailsOnDietChange(currentFoodDetailsId)))));\nexports.getCurrentFoodDetailsEpic$ = (actions$, state$) => (actions$.pipe(redux_observable_1.ofType(actions_1.SET_CURRENT_FOOD_DETAILS_START, actions_1.SET_CURRENT_FOOD_DETAILS_ON_DIET_CHANGE), operators_1.withLatestFrom(state$), operators_1.map(([action, state]) => ({\n    dietType: selectors_1.selectSettingsDietType(state),\n    foodItemId: action.foodItemId,\n    regionCode: selectors_1.selectSettingsRegionCode(state)\n})), operators_1.switchMap(({ dietType, foodItemId, regionCode }) => (seasonal_shared_frontend_utilities_1.getFoodDetailsData(foodItemId, dietType === seasonal_shared_models_1.DIET_TYPE.VEGETARIAN, dietType === seasonal_shared_models_1.DIET_TYPE.VEGAN, regionCode))), operators_1.map((currentFoodData) => actions_1.setCurrentFoodDetailsSuccess(currentFoodData))));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst redux_observable_1 = require(\"redux-observable\");\nconst actions_1 = require(\"../actions\");\nconst operators_1 = require(\"rxjs/operators\");\nconst selectors_1 = require(\"../selectors\");\nexports.setSeasonSelectedSeasonName$ = (actions$, state$) => (actions$.pipe(redux_observable_1.ofType(actions_1.SELECT_SEASON), operators_1.map((action) => action.seasonIndex), operators_1.withLatestFrom(state$), operators_1.map(([seasonIndex, state]) => {\n    const basicSeasons = selectors_1.selectAllBasicSeasons(state);\n    return basicSeasons && basicSeasons[seasonIndex];\n}), operators_1.map((selectedSeason) => actions_1.setSelectedSeasonName(selectedSeason && selectedSeason.name || ''))));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst redux_observable_1 = require(\"redux-observable\");\nconst actions_1 = require(\"../actions\");\nconst operators_1 = require(\"rxjs/operators\");\nconst seasonal_shared_frontend_utilities_1 = require(\"@chrisb-dev/seasonal-shared-frontend-utilities\");\nconst selectors_1 = require(\"../selectors\");\nexports.getCountriesStart$ = (actions$) => (actions$.pipe(redux_observable_1.ofType(actions_1.INIT_APP), operators_1.mapTo(actions_1.getCountriesStart())));\nexports.getCountries$ = (actions$) => (actions$.pipe(redux_observable_1.ofType(actions_1.INIT_APP), operators_1.switchMap(() => seasonal_shared_frontend_utilities_1.getCountries()), operators_1.map((countries) => actions_1.getCountriesSuccess(countries))));\nexports.promptCountryChangeOnNewDetected$ = (actions$, state$) => (actions$.pipe(redux_observable_1.ofType(actions_1.USER_REGION_DETECTED), operators_1.withLatestFrom(state$), operators_1.map(([action, state]) => ({\n    detectedRegion: action.regionCode,\n    settingsRegionCode: selectors_1.selectSettingsRegionCode(state)\n})), operators_1.filter(({ detectedRegion, settingsRegionCode }) => (detectedRegion !== settingsRegionCode)), operators_1.map(({ detectedRegion }) => actions_1.setUserRegionDetected(detectedRegion))));\nexports.hideRegionChangePrompt$ = (actions$) => (actions$.pipe(redux_observable_1.ofType(actions_1.SET_USER_REGION_DETECTED), operators_1.delay(5000), operators_1.mapTo(actions_1.hideRegionChangePrompt())));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst current_food_details_reducer_1 = require(\"./current-food-details.reducer\");\nconst current_season_reducer_1 = require(\"./current-season.reducer\");\nconst all_basic_seasons_reducer_1 = require(\"./all-basic-seasons.reducer\");\nconst all_seasons_reducer_1 = require(\"./all-seasons.reducer\");\nconst settings_reducer_1 = require(\"./settings.reducer\");\nconst ui_reducer_1 = require(\"./ui.reducer\");\nconst country_reducer_1 = require(\"./country.reducer\");\nexports.allReducers = {\n    allBasicSeasonData: all_basic_seasons_reducer_1.allBasicSeasonReducer,\n    allSeasonsWithFoodData: all_seasons_reducer_1.allSeasonsReducer,\n    countryData: country_reducer_1.countryReducer,\n    currentFoodDetailsData: current_food_details_reducer_1.currentFoodDetailsReducer,\n    currentSeasonData: current_season_reducer_1.currentSeasonWithFoodReducer,\n    settings: settings_reducer_1.settingsReducer,\n    ui: ui_reducer_1.uiReducer\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst actions_1 = require(\"../actions\");\nconst getDefaultState = () => ({\n    data: undefined,\n    isLoading: true\n});\nfunction currentFoodDetailsReducer(state = getDefaultState(), action) {\n    switch (action.type) {\n        case actions_1.SET_CURRENT_FOOD_DETAILS_START:\n            return Object.assign(Object.assign({}, state), { isLoading: true });\n        case actions_1.SET_CURRENT_FOOD_DETAILS_SUCCESS:\n            return Object.assign(Object.assign({}, state), { data: action\n                    .currentFoodDetailsData, isLoading: false });\n        default:\n            return state;\n    }\n}\nexports.currentFoodDetailsReducer = currentFoodDetailsReducer;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst actions_1 = require(\"../actions\");\nconst seasonal_shared_frontend_utilities_1 = require(\"@chrisb-dev/seasonal-shared-frontend-utilities\");\nconst getDefaultState = () => ({\n    currentSeasonIndex: seasonal_shared_frontend_utilities_1.getCurrentSeasonIndex(),\n    data: undefined,\n    isFoodLoading: true,\n    isRecipesLoading: true\n});\nfunction currentSeasonWithFoodReducer(state = getDefaultState(), action) {\n    switch (action.type) {\n        case actions_1.SET_CURRENT_SEASON_WITH_FOOD_START:\n            return Object.assign(Object.assign({}, state), { isFoodLoading: true });\n        case actions_1.SET_CURRENT_SEASON_WITH_FOOD_SUCCESS:\n            return Object.assign(Object.assign({}, state), { data: Object.assign(Object.assign({}, state.data), action.currentSeasonData), isFoodLoading: false });\n        case actions_1.SET_CURRENT_SEASON_WITH_RECIPES_START:\n            return Object.assign(Object.assign({}, state), { isRecipesLoading: true });\n        case actions_1.SET_CURRENT_SEASON_WITH_RECIPES_SUCCESS:\n            return Object.assign(Object.assign({}, state), { data: Object.assign(Object.assign({}, state.data), action.currentSeasonData), isRecipesLoading: false });\n        case actions_1.SELECT_SEASON:\n        case actions_1.FOOD_DETAILS_SELECT_SEASON:\n            return Object.assign(Object.assign({}, state), { currentSeasonIndex: action.seasonIndex });\n        case actions_1.SET_SELECTED_SEASON_NAME:\n            return Object.assign(Object.assign({}, state), { data: state.data && Object.assign(Object.assign({}, state.data), { name: action.seasonName }) });\n        default:\n            return state;\n    }\n}\nexports.currentSeasonWithFoodReducer = currentSeasonWithFoodReducer;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst actions_1 = require(\"../actions\");\nconst getDefaultState = () => ({\n    data: undefined,\n    isLoading: true\n});\nfunction allBasicSeasonReducer(state = getDefaultState(), action) {\n    switch (action.type) {\n        case actions_1.SET_ALL_BASIC_SEASONS_START:\n            return Object.assign(Object.assign({}, state), { isLoading: true });\n        case actions_1.SET_ALL_BASIC_SEASONS_SUCCESS:\n            return Object.assign(Object.assign({}, state), { data: action.seasonData, isLoading: false });\n        default:\n            return state;\n    }\n}\nexports.allBasicSeasonReducer = allBasicSeasonReducer;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst actions_1 = require(\"../actions\");\nconst populateApiData = (state, action) => !state.data\n    ? action.seasonData\n    : state.data.map((season) => (Object.assign(Object.assign({}, season), action\n        .seasonData.find((seasonData) => seasonData.id === season.id))));\nconst getDefaultState = () => ({\n    data: undefined,\n    isFoodLoading: true,\n    isRecipesLoading: true,\n    numberOfSeasonsInView: 1\n});\nfunction allSeasonsReducer(state = getDefaultState(), action) {\n    switch (action.type) {\n        case actions_1.SET_ALL_SEASONS_WITH_FOOD_START:\n            return Object.assign(Object.assign({}, state), { isFoodLoading: true });\n        case actions_1.SET_ALL_SEASONS_WITH_FOOD_SUCCESS:\n            return Object.assign(Object.assign({}, state), { data: populateApiData(state, action), isFoodLoading: false });\n        case actions_1.SET_ALL_SEASONS_WITH_RECIPES_START:\n            return Object.assign(Object.assign({}, state), { isRecipesLoading: true });\n        case actions_1.SET_ALL_SEASONS_WITH_RECIPES_SUCCESS:\n            return Object.assign(Object.assign({}, state), { data: populateApiData(state, action), isRecipesLoading: false });\n        case actions_1.INCREASE_NUMBER_OF_ALL_FOOD_SEASONS_IN_VIEW:\n            return Object.assign(Object.assign({}, state), { numberOfSeasonsInView: state.numberOfSeasonsInView + 1 });\n        default:\n            return state;\n    }\n}\nexports.allSeasonsReducer = allSeasonsReducer;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst seasonal_shared_models_1 = require(\"@chrisb-dev/seasonal-shared-models\");\nconst actions_1 = require(\"../actions\");\nconst v4_1 = __importDefault(require(\"uuid/v4\"));\nconst getDefaultState = () => ({\n    dietType: seasonal_shared_models_1.DIET_TYPE.ALL,\n    selectedRegionCode: undefined,\n    timesAppStarted: 0,\n    userId: undefined\n});\nfunction settingsReducer(state = getDefaultState(), action) {\n    switch (action.type) {\n        case actions_1.INIT_SETTINGS:\n            const initialSettings = action.settings;\n            return Object.assign(Object.assign(Object.assign({}, state), initialSettings), { userId: initialSettings.userId || v4_1.default() });\n        case actions_1.SET_DIET_TYPE:\n            return Object.assign(Object.assign({}, state), { dietType: action.dietType });\n        case actions_1.SET_USER_REGION_DETECTED:\n        case actions_1.SET_REGION:\n            return Object.assign(Object.assign({}, state), { selectedRegionCode: action.regionCode });\n        default:\n            return state;\n    }\n}\nexports.settingsReducer = settingsReducer;\n","export * from './ImageGridItem/ImageGridItem';\n\nexport * from './ImageGrid/ImageGrid';\n\nexport * from './SummaryColumn';\n\nexport * from './SummaryColumnList';\n\nexport * from './SeasonNameView/SeasonNameView';\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst actions_1 = require(\"../actions\");\nconst getDefaultState = () => ({\n    isCountryChangePromptVisible: false,\n    isLocationSettingsPopupVisible: false,\n    isMenuOpen: false,\n    isSearchBarVisible: false\n});\nfunction uiReducer(state = getDefaultState(), action) {\n    switch (action.type) {\n        case actions_1.GO_TO_ALL_SEASONS_VIEW:\n        case actions_1.SELECT_SEASON:\n        case actions_1.CLOSE_MENU:\n            return Object.assign(Object.assign({}, state), { isMenuOpen: false });\n        case actions_1.OPEN_MENU:\n            return Object.assign(Object.assign({}, state), { isMenuOpen: true });\n        case actions_1.SEARCH_BAR_CHANGED:\n            return Object.assign(Object.assign({}, state), { searchTerm: action.newSearchTerm });\n        case actions_1.SHOW_SEARCH_BAR:\n            return Object.assign(Object.assign({}, state), { isSearchBarVisible: true });\n        case actions_1.HIDE_SEARCH_BAR:\n            return Object.assign(Object.assign({}, state), { isSearchBarVisible: false, searchTerm: '' });\n        case actions_1.SET_REGION:\n            return Object.assign(Object.assign({}, state), { isLocationSettingsPopupVisible: false });\n        case actions_1.SET_USER_REGION_DETECTED:\n            return Object.assign(Object.assign({}, state), { isCountryChangePromptVisible: true });\n        case actions_1.HIDE_REGION_CHANGE_PROMPT:\n            return Object.assign(Object.assign({}, state), { isCountryChangePromptVisible: false });\n        case actions_1.SHOW_LOCATION_SETTINGS_POPUP:\n            return Object.assign(Object.assign({}, state), { isLocationSettingsPopupVisible: true });\n        case actions_1.CLOSE_LOCATION_SETTINGS_POPUP:\n            return Object.assign(Object.assign({}, state), { isLocationSettingsPopupVisible: false });\n        default:\n            return state;\n    }\n}\nexports.uiReducer = uiReducer;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst actions_1 = require(\"../actions\");\nconst getDefaultState = () => ({\n    data: undefined,\n    isLoading: true\n});\nfunction countryReducer(state = getDefaultState(), action) {\n    switch (action.type) {\n        case actions_1.GET_COUNTRIES_START:\n            return Object.assign(Object.assign({}, state), { isLoading: true });\n        case actions_1.GET_COUNTRIES_SUCCESS:\n            return Object.assign(Object.assign({}, state), { data: action.countries, isLoading: false });\n        default:\n            return state;\n    }\n}\nexports.countryReducer = countryReducer;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./actions\"));\n__export(require(\"./selectors\"));\n__export(require(\"./epics\"));\n__export(require(\"./reducers\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./get-nearest-region-from-lat-lng\"));\n__export(require(\"./name-search\"));\n__export(require(\"./retrieve-backend-data\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./enums\"));\n__export(require(\"./config\"));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./all-basic-season.selectors\"));\n__export(require(\"./all-seasons-with-food.selectors\"));\n__export(require(\"./country.selectors\"));\n__export(require(\"./current-food-details.selectors\"));\n__export(require(\"./current-season.selectors\"));\n__export(require(\"./settings.selectors\"));\n__export(require(\"./ui.selectors\"));\n__export(require(\"./combined-selectors\"));\n","import React, { FC } from 'react';\n\nimport './AboutEatSeasonal.scss';\n\nimport {\n  TextHeadingLarge,\n  TextMedium\n} from '@chrisb-dev/seasonal-shared-frontend-components';\n\nexport const AboutEatSeasonal: FC = () => (\n  <div className='c-about-eat-seasonal'>\n    <h1 className='c-about-eat-seasonal__heading'>\n      <TextHeadingLarge>\n        About Eat Seasonal\n      </TextHeadingLarge>\n    </h1>\n    <p className='c-about-eat-seasonal__text'>\n      <TextMedium>\n        Eat Seasonal started because we wanted a way to easily see what fruit\n        and vegetables are in seasons. Walking around a supermarket, trying to\n        plan seasonal meals becomes much easier when you can quickly access\n        information on everything that's in season through your phone.\n      </TextMedium>\n    </p>\n    <p className='c-about-eat-seasonal__text'>\n      <TextMedium>\n        The app and website give you quick and simple view of all the food\n        currently in seasons. They also provide a recipes section including\n        carefully selected recipes which use ingredients which are mostly in\n        seasons. New recipes are being added all the time!\n      </TextMedium>\n    </p>\n  </div>\n);\n","import React, { FC } from 'react';\n\nimport './AndroidAppDownload.scss';\n\nexport const AndroidAppDownload: FC<{}> = () => (\n  <a className='c-android-app-download'\n    href={\n    'https://play.google.com/store/apps/details?id=com.chrisbdev.seasonal&p' +\n      'campaignid=MKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1'\n  }>\n    <img className='c-android-app-download__image'\n      alt='Get it on Google Play'\n      src='https://play.google.com/intl/en_us/badges/images/generic/en_badge_web_generic.png'/>\n  </a>\n);\n","import React, { FC } from 'react';\n\nimport './BottomTabs.scss';\n\nimport {\n  BareButton\n} from '@chrisb-dev/seasonal-shared-frontend-components';\nimport { IBottomTabProps } from './BottomTabs.interface';\n\nconst addTabClasses = (isSelected: boolean) => (\n  `c-bottom-tabs__tab ${\n    isSelected\n      ? ' c-bottom-tabs__tab--selected'\n      : ''\n  }`\n);\n\nexport const BottomTabs: FC<IBottomTabProps> = ({\n  isCurrentTabFood,\n  isCurrentTabRecipes,\n  goToFoodTab,\n  goToRecipesTab\n}) => (\n  <nav className='c-bottom-tabs'>\n    <BareButton\n      className={addTabClasses(isCurrentTabFood)}\n      onClick={goToFoodTab}>\n      Food\n    </BareButton>\n    <BareButton\n      className={addTabClasses(isCurrentTabRecipes)}\n      onClick={goToRecipesTab}>\n      Recipes\n    </BareButton>\n  </nav>\n);\n","export enum TABS {\n  FOOD,\n  RECIPES\n}\n","import { createMatchSelector, RouterRootState, getLocation } from 'connected-react-router';\nimport { FOOD_DETAILS_URL, ALL_SEASONS_URL, SETTINGS_URL } from '../../const';\nimport { createSelector } from 'reselect';\nimport { IState } from '../../interfaces';\n\nexport const selectCurrentFoodDetailsParams = createMatchSelector<\n  RouterRootState,\n  {\n    id: string\n  }\n>(\n  `${FOOD_DETAILS_URL}/:id`\n);\n\nexport const selectCurrentFoodDetailsId = createSelector(\n  selectCurrentFoodDetailsParams,\n  (routeParams) => routeParams && routeParams.params.id\n);\n\nexport const selectCurrentLocation = (state: IState) => getLocation(state);\n\nexport const selectCurrentPath = createSelector(\n  selectCurrentLocation,\n  (location) => location.pathname\n);\n\nexport const selectIsCurrentRouteAllSeasons = createSelector(\n  selectCurrentPath,\n  (path) => path === ALL_SEASONS_URL\n);\n\nexport const selectIsCurrentRouteSettings = createSelector(\n  selectCurrentPath,\n  (path) => path === SETTINGS_URL\n);\n","export const LANDING_URL = '/';\nexport const FOOD_TABLE_URL = '/food';\nexport const FOOD_DETAILS_URL = '/food-details';\nexport const ALL_SEASONS_URL = '/all-seasons';\nexport const SETTINGS_URL = '/settings';\n","import { createSelector } from 'reselect';\nimport { IState } from '../../interfaces';\nimport { TABS } from '../../const';\n\nconst selectWebUiState = (state: IState) => state.webUi;\n\nexport const selectCurrentTab = createSelector(\n  selectWebUiState,\n  (webUiState): TABS => webUiState.currentTab\n);\n\nexport const selectIsCurrentTabFood = createSelector(\n  selectCurrentTab,\n  (currentTab): boolean => currentTab === TABS.FOOD\n);\n\nexport const selectIsCurrentTabRecipes = createSelector(\n  selectCurrentTab,\n  (currentTab): boolean => currentTab === TABS.RECIPES\n);\n","import { ActionsObservable } from 'redux-observable';\n\nimport {\n  GO_TO_FOOD_TAB,\n  GO_TO_RECIPES_TABS,\n  GO_TO_WEB_VERSION\n} from '../actions';\n\nimport {\n  SELECT_SEASON,\n  FOOD_DETAILS_SELECT_SEASON,\n  OPEN_MENU,\n  CLOSE_MENU,\n  RECIPE_ITEM_CLICKED,\n  FOOD_ITEM_CLICKED\n} from '@chrisb-dev/seasonal-shared-frontend-redux';\n\nimport {\n  map,\n  filter,\n  ignoreElements\n} from 'rxjs/operators';\nimport { Action } from 'redux';\nimport { Observable } from 'rxjs';\nimport { WebSeasonalEpic } from './seasonal-epic.type';\n\nconst ACTIONS_TO_TRACK = [\n  SELECT_SEASON,\n  FOOD_DETAILS_SELECT_SEASON,\n  OPEN_MENU,\n  CLOSE_MENU,\n  GO_TO_FOOD_TAB,\n  GO_TO_RECIPES_TABS,\n  GO_TO_WEB_VERSION,\n  RECIPE_ITEM_CLICKED,\n  FOOD_ITEM_CLICKED\n];\n\nexport const trackActionEpic$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    filter(({ type }) => ACTIONS_TO_TRACK.includes(type)),\n    map(({ type }) => ga('send', 'event', type, type)),\n    ignoreElements()\n  )\n);\n","import { Action } from 'redux';\n\nexport const GO_TO_FOOD_TAB = 'GO_TO_FOOD_TAB';\nexport function goToFoodTab(): Action {\n  return {\n    type: GO_TO_FOOD_TAB\n  };\n}\n\nexport const GO_TO_RECIPES_TABS = 'GO_TO_RECIPES_TABS';\nexport function goToRecipesTab(): Action {\n  return {\n    type: GO_TO_RECIPES_TABS\n  };\n}\n","import { Action } from 'redux';\n\nexport const GO_TO_WEB_VERSION = 'GO_TO_WEB_VERSION';\nexport function goToWebVersion(): Action {\n  return {\n    type: GO_TO_WEB_VERSION\n  };\n}\n\nexport const GO_BACK_FROM_FOOD_DETAILS = 'GO_BACK_FROM_FOOD_DETAILS';\nexport function goBackFromFoodDetails(): Action {\n  return {\n    type: GO_BACK_FROM_FOOD_DETAILS\n  };\n}\n","import { ActionsObservable, ofType, StateObservable } from 'redux-observable';\n\nimport {\n  ISettingsState,\n  DIET_TYPE\n} from '@chrisb-dev/seasonal-shared-models';\nimport {\n  SET_DIET_TYPE,\n  selectSettingsState,\n  INIT_APP,\n  initSettings,\n  SET_REGION\n} from '@chrisb-dev/seasonal-shared-frontend-redux';\n\nimport { IState } from '../../interfaces';\n\nimport {\n  map,\n  ignoreElements,\n  withLatestFrom,\n  tap\n} from 'rxjs/operators';\nimport { Action } from 'redux';\nimport { Observable } from 'rxjs';\nimport { WebSeasonalEpic } from './seasonal-epic.type';\nimport { setStoredData, getStoredData } from '../../helpers';\n\nconst settingsStorageKey = 'seasonalSettings';\n\nexport const storeSettings$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>,\n  state$: StateObservable<IState>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(\n      SET_DIET_TYPE,\n      SET_REGION\n    ),\n    withLatestFrom(state$),\n    map(([, state]) => selectSettingsState(state)),\n    tap((settingsState) => setStoredData(settingsStorageKey, settingsState)),\n    ignoreElements()\n  )\n);\n\nexport const getStoredSettings$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(INIT_APP),\n    map(() => getStoredData<ISettingsState>(settingsStorageKey)),\n    map((settings) => initSettings(\n      settings\n      ? {\n        ...settings,\n        timesAppStarted: (settings.timesAppStarted || 0) + 1\n      }\n      :\n      {\n        dietType: DIET_TYPE.ALL,\n        selectedRegionCode: undefined,\n        timesAppStarted: 1\n      })\n    )\n  )\n);\n","import { combineEpics } from 'redux-observable';\n\nimport { rootEpics } from '@chrisb-dev/seasonal-shared-frontend-redux';\nimport { trackActionEpic$ } from './tracking.epics';\n\nimport {\n  goToWebVersion$,\n  goToRecipeLink$,\n  goToFoodLink$,\n  goToFoodTable$,\n  goToFoodDetails$,\n  initFoodDetails$,\n  initAllSeasonsWithFoodData$,\n  goToAllSeasonsView$,\n  goBack$,\n  goToSettingsPage$\n} from './route.epics';\n\nimport {\n  getStoredSettings$,\n  storeSettings$\n} from './settings.epics';\n\nexport const rootEpic = combineEpics(\n  ...rootEpics,\n  trackActionEpic$,\n  goToWebVersion$,\n  goToRecipeLink$,\n  goToFoodLink$,\n  goToFoodDetails$,\n  goBack$,\n  initFoodDetails$,\n  initAllSeasonsWithFoodData$,\n  goToFoodTable$,\n  goToAllSeasonsView$,\n  getStoredSettings$,\n  storeSettings$,\n  goToSettingsPage$\n);\n","import { ActionsObservable, ofType, StateObservable } from 'redux-observable';\nimport {\n  mapTo, withLatestFrom, map, filter, debounceTime\n} from 'rxjs/operators';\nimport { Action } from 'redux';\nimport { Observable } from 'rxjs';\nimport {\n  GO_TO_WEB_VERSION,\n  GO_BACK_FROM_FOOD_DETAILS\n} from '../actions';\nimport {\n  GO_TO_ALL_SEASONS_VIEW,\n  RECIPE_ITEM_CLICKED,\n  IRecipeItemClicked,\n  FOOD_ITEM_CLICKED,\n  IFoodItemClicked,\n  FOOD_DETAILS_SELECT_SEASON,\n  SELECT_SEASON,\n  setCurrentFoodDetailsStart,\n  INIT_APP,\n  selectCurrentSeasonRecipesById,\n  setAllSeasonsWithFoodStart,\n  GO_BACK_FROM_SETTINGS_PAGE,\n  GO_TO_SETTINGS_PAGE,\n  SET_REGION\n} from '@chrisb-dev/seasonal-shared-frontend-redux';\nimport { push, goBack } from 'connected-react-router';\nimport { FOOD_TABLE_URL, FOOD_DETAILS_URL, ALL_SEASONS_URL, SETTINGS_URL } from '../../const';\nimport { IState } from '../../interfaces';\nimport { selectCurrentFoodDetailsId, selectIsCurrentRouteAllSeasons } from '../selectors';\nimport { WebSeasonalEpic } from './seasonal-epic.type';\n\nexport const goToWebVersion$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(GO_TO_WEB_VERSION),\n    mapTo(push(FOOD_TABLE_URL))\n  )\n);\n\nexport const goToRecipeLink$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>,\n  state$: StateObservable<IState>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(RECIPE_ITEM_CLICKED),\n    withLatestFrom(state$),\n    map(([\n      action,\n      state\n    ]) => selectCurrentSeasonRecipesById(\n        (action as IRecipeItemClicked).recipeItemId\n      )(state)\n    ),\n    map((recipe) => {\n      if (recipe) {\n        window.open(recipe.linkUrl, '_blank');\n      }\n      return { type: '' };\n    })\n  )\n);\n\nexport const goToFoodLink$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(FOOD_ITEM_CLICKED),\n    map((action) => (\n      push(`${FOOD_DETAILS_URL}/${(action as IFoodItemClicked).foodItemId}`)\n    ))\n  )\n);\n\nexport const goToFoodDetails$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(FOOD_ITEM_CLICKED),\n    map((action) => (\n      setCurrentFoodDetailsStart((action as IFoodItemClicked).foodItemId)\n    ))\n  )\n);\n\nexport const initFoodDetails$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>,\n  state$: StateObservable<IState>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(INIT_APP),\n    withLatestFrom(state$),\n    map(([, state]) => selectCurrentFoodDetailsId(state)),\n    filter((foodDetailsId) => Boolean(foodDetailsId)),\n    map((foodDetailsId) => setCurrentFoodDetailsStart(foodDetailsId!))\n  )\n);\n\nexport const initAllSeasonsWithFoodData$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>,\n  state$: StateObservable<IState>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(\n      GO_TO_ALL_SEASONS_VIEW,\n      INIT_APP,\n      GO_BACK_FROM_FOOD_DETAILS\n    ),\n    debounceTime(50),\n    withLatestFrom(state$),\n    map(([, state]) => selectIsCurrentRouteAllSeasons(state)),\n    filter((isRouteAllSeasons) => Boolean(isRouteAllSeasons)),\n    mapTo(setAllSeasonsWithFoodStart())\n  )\n);\n\nexport const goToFoodTable$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(\n      FOOD_DETAILS_SELECT_SEASON,\n      SELECT_SEASON\n    ),\n    mapTo(push(FOOD_TABLE_URL))\n  )\n);\n\nexport const goBack$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(\n      SET_REGION,\n      GO_BACK_FROM_SETTINGS_PAGE,\n      GO_BACK_FROM_FOOD_DETAILS\n    ),\n    mapTo(goBack())\n  )\n);\n\nexport const goToAllSeasonsView$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(GO_TO_ALL_SEASONS_VIEW),\n    mapTo(push(ALL_SEASONS_URL))\n  )\n);\n\nexport const goToSettingsPage$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(GO_TO_SETTINGS_PAGE),\n    mapTo(push(SETTINGS_URL))\n  )\n);\n","import {\n  Action,\n  applyMiddleware,\n  combineReducers,\n  createStore,\n  compose\n} from 'redux';\nimport { createEpicMiddleware } from 'redux-observable';\n\nimport {\n  allReducers\n} from '@chrisb-dev/seasonal-shared-frontend-redux';\n\nimport { webUiReducer } from './web-ui.reducer';\n\nimport {\n  rootEpic\n} from '../epics';\n\nimport { IState } from '../../interfaces';\n\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport { createHashHistory } from 'history';\n\nconst epicMiddleware = createEpicMiddleware<Action, Action, IState, {}>();\nexport const storeHistory = createHashHistory();\n\nexport const store = createStore(\n  combineReducers({\n    ...allReducers,\n    router: connectRouter(storeHistory),\n    webUi: webUiReducer\n  }),\n  compose(\n    applyMiddleware(\n      routerMiddleware(storeHistory),\n      epicMiddleware\n    )\n  )\n);\nepicMiddleware.run(rootEpic);\n","import {\n  GO_TO_FOOD_TAB,\n  GO_TO_RECIPES_TABS\n} from '../actions';\nimport { IWebUiState } from '../../interfaces';\nimport { Action } from 'redux';\nimport { TABS } from '../../const';\n\nconst getDefaultState = (): IWebUiState => ({\n  currentTab: TABS.FOOD\n});\n\nexport function webUiReducer(\n  state = getDefaultState(),\n  action: Action\n): IWebUiState {\n  switch (action.type) {\n    case GO_TO_FOOD_TAB:\n      return {\n        ...state,\n        currentTab: TABS.FOOD\n      };\n    case GO_TO_RECIPES_TABS:\n      return {\n        ...state,\n        currentTab: TABS.RECIPES\n      };\n    default:\n      return state;\n  }\n}\n","import { connect } from 'react-redux';\nimport {\n  BottomTabs\n} from './BottomTabs';\nimport {\n  goToFoodTab,\n  goToRecipesTab,\n  selectIsCurrentTabFood,\n  selectIsCurrentTabRecipes\n} from '../../store';\nimport {\n  IBottomTabDispatchProps,\n  IBottomTabInputProps\n} from './BottomTabs.interface';\nimport { Dispatch } from 'redux';\nimport { IState } from '../../interfaces';\n\nconst mapStateToProps = (\n  state: IState\n): IBottomTabInputProps => ({\n  isCurrentTabFood: selectIsCurrentTabFood(state),\n  isCurrentTabRecipes: selectIsCurrentTabRecipes(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IBottomTabDispatchProps => ({\n  goToFoodTab: () => dispatch(goToFoodTab()),\n  goToRecipesTab: () => dispatch(goToRecipesTab())\n});\n\nexport const BottomTabsConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(BottomTabs);\n","import React, { FC } from 'react';\n\nimport './CurrentSeasonName.scss';\n\nimport { ICurrentSeasonName } from './CurrentSeasonName.interface';\nimport { SeasonNameView } from '../../components-layout';\n\nexport const CurrentSeasonName: FC<ICurrentSeasonName> = ({\n  currentSeasonName,\n  isLoading\n}) => (\n  !isLoading\n    ? <SeasonNameView name={currentSeasonName} />\n    : null\n);\n","import { connect } from 'react-redux';\nimport {\n  CurrentSeasonName\n} from './CurrentSeasonName';\nimport {\n  selectCurrentSeasonName,\n  selectIsCurrentSeasonFoodLoading\n} from '@chrisb-dev/seasonal-shared-frontend-redux';\nimport {\n  ICurrentSeasonName\n} from './CurrentSeasonName.interface';\nimport { IState } from '../../interfaces';\n\nconst mapStateToProps = (\n  state: IState\n): ICurrentSeasonName => ({\n  currentSeasonName: selectCurrentSeasonName(state),\n  isLoading: selectIsCurrentSeasonFoodLoading(state)\n});\n\nexport const CurrentSeasonNameConnecter = connect(\n  mapStateToProps\n)(CurrentSeasonName);\n","import React, { FC } from 'react';\n\nimport './DietaryFilters.scss';\n\nimport {\n  IDietaryFiltersProps\n} from './DietaryFilters.interface';\nimport { DIET_TYPE } from '@chrisb-dev/seasonal-shared-models';\nimport { RadioButtonGroup } from '@chrisb-dev/seasonal-shared-frontend-components';\n\nconst radioButtons = [{\n  label: 'All',\n  value: DIET_TYPE.ALL\n}, {\n  label: 'Vegetarian',\n  value: DIET_TYPE.VEGETARIAN\n}, {\n  label: 'Vegan',\n  value: DIET_TYPE.VEGAN\n}];\n\nexport const DietaryFilters: FC<IDietaryFiltersProps> = ({\n  dietType,\n  update\n}) => (\n  <div className='c-dietary-filters'>\n    <RadioButtonGroup\n      groupName='dietary-filter'\n      radioButtons={radioButtons}\n      selectedValue={dietType}\n      onChange={(newValue) => update(newValue as DIET_TYPE)}\n    />\n  </div>\n);\n","import { connect } from 'react-redux';\nimport {\n  DietaryFilters\n} from './DietaryFilters';\n\nimport { IState } from '../../interfaces';\nimport {\n  IDietaryFiltersInputProps,\n  IDietaryFiltersDispatchProps\n} from './DietaryFilters.interface';\nimport { Dispatch } from 'redux';\nimport {\n  DIET_TYPE\n} from '@chrisb-dev/seasonal-shared-models';\nimport {\n  setDietType, selectSettingsDietType\n} from '@chrisb-dev/seasonal-shared-frontend-redux';\n\nconst mapStateToProps = (\n  state: IState\n): IDietaryFiltersInputProps => ({\n  dietType: selectSettingsDietType(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IDietaryFiltersDispatchProps => ({\n  update: (dietType: DIET_TYPE) => dispatch(setDietType(dietType))\n});\n\nexport const DietaryFiltersConnector = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DietaryFilters);\n","import React, { FC } from 'react';\n\nimport './FoodDetailsLoader.scss';\n\nimport {\n  LoadingSpinner\n} from '@chrisb-dev/seasonal-shared-frontend-components';\n\nimport {\n  IFoodDetailsLoaderInputProps\n} from './FoodDetailsLoader.interface';\n\nexport const FoodDetailsLoader: FC<IFoodDetailsLoaderInputProps> = ({\n  isLoading\n}) => (\n  isLoading\n    ? <div className='c-food-details-loader'>\n      <LoadingSpinner />\n    </div>\n    : null\n);\n","import { connect } from 'react-redux';\nimport {\n  FoodDetailsLoader\n} from './FoodDetailsLoader';\nimport {\n  selectIsFoodDataOrBasicSeasonsLoading\n} from '@chrisb-dev/seasonal-shared-frontend-redux';\n\nimport { IState } from '../../interfaces';\nimport {\n  IFoodDetailsLoaderInputProps\n} from './FoodDetailsLoader.interface';\n\nconst mapStateToProps = (\n  state: IState\n): IFoodDetailsLoaderInputProps => ({\n  isLoading: selectIsFoodDataOrBasicSeasonsLoading(state)\n});\n\nexport const FoodDetailsLoaderConnecter = connect(\n  mapStateToProps\n)(FoodDetailsLoader);\n","import React, { FC } from 'react';\n\nimport './FoodDetailsTopSection.scss';\n\nimport {\n  ArrowIcon,\n  BareButton,\n  TextHeadingMedium\n} from '@chrisb-dev/seasonal-shared-frontend-components';\n\nimport {\n  IFoodDetailsTopSectionProps\n} from './FoodDetailsTopSection.interface';\n\nexport const FoodDetailsTopSection: FC<IFoodDetailsTopSectionProps> = ({\n  foodImageUrl,\n  foodName,\n  isLoading,\n  onGoBack\n}) => (\n  !isLoading\n    ? <div className='c-food-details-top-section'>\n    <div className='c-food-details-top-section__top-bar'>\n      <BareButton\n        className='c-food-details-top-section__back-button'\n        onClick={onGoBack}>\n        <ArrowIcon />\n      </BareButton>\n      <TextHeadingMedium className='c-food-details-top-section__food-name'>\n        {foodName}\n      </TextHeadingMedium>\n    </div>\n    {\n      foodImageUrl && <img src={foodImageUrl}\n        alt={foodName}\n        className='c-food-details-top-section__food-image'/>\n    }\n  </div>\n  : null\n);\n","import { connect } from 'react-redux';\nimport {\n  FoodDetailsTopSection\n} from './FoodDetailsTopSection';\nimport {\n  goBackFromFoodDetails\n} from '../../store';\nimport {\n  selectCurrentFoodDetailsName,\n  selectCurrentFoodDetailsImageUrl,\n  selectIsFoodDataOrBasicSeasonsLoading\n} from '@chrisb-dev/seasonal-shared-frontend-redux';\n\nimport { IState } from '../../interfaces';\nimport {\n  IFoodDetailsTopSectionInputProps,\n  IFoodDetailsTopSectionDispatchProps\n} from './FoodDetailsTopSection.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = (\n  state: IState\n): IFoodDetailsTopSectionInputProps => ({\n  foodImageUrl: selectCurrentFoodDetailsImageUrl(state),\n  foodName: selectCurrentFoodDetailsName(state),\n  isLoading: selectIsFoodDataOrBasicSeasonsLoading(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IFoodDetailsTopSectionDispatchProps => ({\n  onGoBack: () => dispatch(goBackFromFoodDetails())\n});\n\nexport const FoodDetailsTopSectionConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FoodDetailsTopSection);\n","import React, { FC } from 'react';\n\nimport './FoodTable.scss';\n\nimport {\n  ImageGrid\n} from '../../components-layout';\n\nimport {\n  LoadingSpinner\n} from '@chrisb-dev/seasonal-shared-frontend-components';\nimport { IFoodTableProps } from './FoodTable.interface';\n\nexport const FoodTable: FC<IFoodTableProps> = ({\n  isCurrentTabFood,\n  isLoading,\n  food,\n  onFoodClick\n}) => (\n  isCurrentTabFood\n    ? isLoading\n      ? <div className='c-food-table__loading-spinner-wrapper'>\n        <LoadingSpinner />\n      </div>\n      : <ImageGrid data={food} onClick={onFoodClick} />\n    : null\n);\n","import { connect } from 'react-redux';\nimport {\n  FoodTable\n} from './FoodTable';\nimport {\n  selectIsCurrentTabFood\n} from '../../store';\nimport {\n  selectIsCurrentSeasonFoodLoading,\n  selectVisibleFoodData,\n  foodItemClicked\n} from '@chrisb-dev/seasonal-shared-frontend-redux';\nimport { IState } from '../../interfaces';\nimport {\n  IFoodTableInputProps,\n  IFoodTableDispatchProps\n} from './FoodTable.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = (\n  state: IState\n): IFoodTableInputProps => {\n  return {\n    food: selectVisibleFoodData(state),\n    isCurrentTabFood: selectIsCurrentTabFood(state),\n    isLoading: selectIsCurrentSeasonFoodLoading(state)\n  };\n};\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IFoodTableDispatchProps => {\n  return {\n    onFoodClick: (foodItemId) => dispatch(foodItemClicked(foodItemId))\n  };\n};\n\nexport const FoodTableConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FoodTable);\n","import React, { FC } from 'react';\n\nimport './Header.scss';\n\nimport {\n  BareButton,\n  BurgerIcon,\n  TextHeadingLarge\n} from '@chrisb-dev/seasonal-shared-frontend-components';\nimport {\n  SearchBarConnecter\n} from '../';\nimport { IHeaderDispatchProps } from './Header.interface';\n\nexport const Header: FC<IHeaderDispatchProps> = ({\n  onMenuOpen\n}) => (\n  <header className='c-header'>\n    <BareButton className='c-header__btn' onClick={onMenuOpen}>\n      <BurgerIcon />\n    </BareButton>\n    <h1 className='c-header__text'>\n      <TextHeadingLarge>\n        Eat Seasonal\n      </TextHeadingLarge>\n    </h1>\n    <SearchBarConnecter />\n  </header>\n);\n","import { connect } from 'react-redux';\nimport {\n  Header\n} from './Header';\nimport {\n  openMenu\n} from '@chrisb-dev/seasonal-shared-frontend-redux';\nimport { IHeaderDispatchProps } from './Header.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = () => ({});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IHeaderDispatchProps => ({\n  onMenuOpen: () => dispatch(openMenu())\n});\n\nexport const HeaderConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Header);\n","import React, { FC } from 'react';\n\nimport './IOSAppDownload.scss';\n\nexport const IOSAppDownload: FC<{}> = () => (\n  <a className='c-ios-app-download'\n    href='https://apps.apple.com/us/app/eat-seasonal/id1496551124?ls=1'>\n    <img className='c-ios-app-download__image'\n      alt='Get it on the iOS store'\n      src='https://developer.apple.com/app-store/marketing/guidelines/images/badge-example-preferred_2x.png'/>\n  </a>\n);\n","import React, { FC } from 'react';\n\nimport { ILocationSelectorProps } from './LocationSelector.interface';\nimport { GroupedSelectBox } from '../../components-elements';\n\nexport const LocationSelector: FC<ILocationSelectorProps> = ({\n  countryAndRegionSelectGroup,\n  setRegion\n}) => (\n  <GroupedSelectBox\n    groups={countryAndRegionSelectGroup}\n    onSelected={setRegion} />\n);\n","import { connect } from 'react-redux';\nimport {\n  LocationSelector\n} from './LocationSelector';\nimport {\n  setRegion,\n  selectCountryAndRegionsSelectGroup\n} from '@chrisb-dev/seasonal-shared-frontend-redux';\nimport {\n  ILocationSelectorDispatchProps,\n  ILocationSelectorInputProps\n} from './LocationSelector.interface';\nimport { Dispatch } from 'redux';\nimport { IState } from '../../interfaces';\n\nconst mapStateToProps = (state: IState): ILocationSelectorInputProps => ({\n  countryAndRegionSelectGroup: selectCountryAndRegionsSelectGroup(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): ILocationSelectorDispatchProps => ({\n  setRegion: (regionId: string) => dispatch(setRegion(regionId))\n});\n\nexport const LocationSelectorConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LocationSelector);\n","import React, { FC } from 'react';\n\nimport './PageLayout.scss';\n\nexport const PageLayout: FC<{}> = ({\n  children\n}) => (\n  <div className='c-page-layout'>\n    { children }\n  </div>\n);\n","import React, { Fragment, FC } from 'react';\n\nimport './SeasonMenu.scss';\n\nimport {\n  BareButton,\n  CrossIcon,\n  TextMedium,\n  LoadingSpinner\n} from '@chrisb-dev/seasonal-shared-frontend-components';\n\nimport {\n  fadeInOutAnimation\n} from '../../helpers';\nimport { PoseGroup } from 'react-pose';\nimport { ISeasonMenuProps } from './SeasonMenu.interface';\n\nconst OverlayFadeInOutAnimation = fadeInOutAnimation();\n\nexport const SeasonMenu: FC<ISeasonMenuProps> = ({\n  allBasicSeasonData,\n  currentSeasonIndex,\n  isCurrentRouteAllSeasons,\n  isCurrentRouteSettings,\n  isLoading,\n  isMenuOpen,\n  onSeasonSelected,\n  onClose,\n  onAllSeasonsSelected,\n  onSettingsSelected\n}) => (\n  <div>\n    <PoseGroup>\n      {\n        isMenuOpen &&\n        <OverlayFadeInOutAnimation key='season-menu-overlay'\n          className='c-season-menu__overlay'\n          onClick={onClose} />\n      }\n    </PoseGroup>\n    <nav\n      className={`c-season-menu ${isMenuOpen ? 'c-season-menu--is-open' : ''}`}>\n      {\n        !isLoading\n          ? <Fragment>\n              { allBasicSeasonData &&\n                  allBasicSeasonData.map(({ name }, index) => (\n                  <BareButton\n                    key={name}\n                    className={\n                      `c-season-menu__button ${\n                        !isCurrentRouteSettings\n                        && !isCurrentRouteAllSeasons\n                        && index === currentSeasonIndex\n                          ? 'c-season-menu__button--selected'\n                          : ''\n                        }`}\n                    onClick={() => onSeasonSelected(index)}>\n                    <TextMedium>{ name }</TextMedium>\n                  </BareButton>\n                ))\n              }\n              <BareButton className={\n                `c-season-menu__button ${\n                  isCurrentRouteAllSeasons\n                    ? 'c-season-menu__button--selected'\n                    : ''\n                }`\n                }\n                onClick={onAllSeasonsSelected}>\n                <TextMedium>All seasons</TextMedium>\n              </BareButton>\n              <BareButton className={\n                `c-season-menu__button ${\n                  isCurrentRouteSettings\n                    ? 'c-season-menu__button--selected'\n                    : ''\n                }`\n                }\n                onClick={onSettingsSelected}>\n                <TextMedium>Settings</TextMedium>\n              </BareButton>\n          </Fragment>\n          : <div className='c-season-menu__loading-spinner-wrapper'>\n            <LoadingSpinner />\n          </div>\n      }\n      <BareButton className='c-season-menu__close-btn'\n        onClick={onClose}>\n        <CrossIcon />\n      </BareButton>\n    </nav>\n  </div>\n);\n","import { connect } from 'react-redux';\nimport {\n  SeasonMenu\n} from './SeasonMenu';\nimport {\n  selectIsMenuOpen,\n  closeMenu,\n  selectAllBasicSeasons,\n  selectIsBasicSeasonsLoading,\n  selectSeason,\n  selectCurrentSeasonIndex,\n  goToAllSeasonsView,\n  goToSettingsPage\n} from '@chrisb-dev/seasonal-shared-frontend-redux';\n\nimport { IState } from '../../interfaces';\nimport {\n  ISeasonMenuInputProps,\n  ISeasonMenuDispatchProps\n} from './SeasonMenu.interface';\nimport { Dispatch } from 'redux';\n\nimport { selectIsCurrentRouteAllSeasons, selectIsCurrentRouteSettings } from '../../store';\n\nconst mapStateToProps = (\n  state: IState\n): ISeasonMenuInputProps => ({\n  allBasicSeasonData: selectAllBasicSeasons(state),\n  currentSeasonIndex: selectCurrentSeasonIndex(state),\n  isCurrentRouteAllSeasons: selectIsCurrentRouteAllSeasons(state),\n  isCurrentRouteSettings: selectIsCurrentRouteSettings(state),\n  isLoading: selectIsBasicSeasonsLoading(state),\n  isMenuOpen: selectIsMenuOpen(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): ISeasonMenuDispatchProps => ({\n  onAllSeasonsSelected: () => dispatch(goToAllSeasonsView()),\n  onClose: () => dispatch(closeMenu()),\n  onSeasonSelected: (\n    seasonIndex: number\n  ) => dispatch(selectSeason(seasonIndex)),\n  onSettingsSelected: () => dispatch(goToSettingsPage())\n});\n\nexport const SeasonMenuConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SeasonMenu);\n","import React, { FC } from 'react';\nimport { PageLayout } from '../../components-layout/PageLayout/PageLayout';\nimport { HeaderConnecter } from '../Header/Header.connector';\nimport { SeasonMenuConnecter } from '../SeasonMenu/SeasonMenu.connector';\n\nexport const PageWithMenu: FC<{}> = ({\n  children\n}) => (\n  <PageLayout>\n    <HeaderConnecter />\n    <SeasonMenuConnecter />\n    { children }\n  </PageLayout>\n);\n","import React, { FC } from 'react';\n\nimport './RecipesForFood.scss';\n\nimport { IRecipesForFoodProps } from './RecipesForFood.interface';\nimport { ImageGrid } from '../../components-layout';\nimport {\n  TextHeadingSmall\n} from '@chrisb-dev/seasonal-shared-frontend-components';\nimport { DietaryFiltersConnector } from '../DietaryFilters/DietaryFilters.connector';\n\nexport const RecipesForFood: FC<IRecipesForFoodProps> = ({\n  isLoading,\n  currentFoodDetailsRecipes,\n  onRecipeSelected\n}) => (\n  !isLoading && currentFoodDetailsRecipes && currentFoodDetailsRecipes.length > 0\n    ? <div className='c-recipes-for-food'>\n      <TextHeadingSmall className='c-recipes-for-food__heading'>\n        Recipes\n      </TextHeadingSmall>\n      <DietaryFiltersConnector />\n      <ImageGrid data={currentFoodDetailsRecipes} onClick={onRecipeSelected} />\n    </div>\n    : null\n);\n","import { connect } from 'react-redux';\nimport {\n  RecipesForFood\n} from './RecipesForFood';\nimport {\n  selectIsFoodDataOrBasicSeasonsLoading,\n  selectVisibleRecipesForFoodDetailsData,\n  foodDetailsSelectRecipe\n} from '@chrisb-dev/seasonal-shared-frontend-redux';\n\nimport { IState } from '../../interfaces';\nimport {\n  IRecipesForFoodInputProps,\n  IRecipesForFoodDispatchProps\n} from './RecipesForFood.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = (\n  state: IState\n): IRecipesForFoodInputProps => ({\n  currentFoodDetailsRecipes: selectVisibleRecipesForFoodDetailsData(state),\n  isLoading: selectIsFoodDataOrBasicSeasonsLoading(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IRecipesForFoodDispatchProps => ({\n  onRecipeSelected: (recipeId: string) => (\n    dispatch(foodDetailsSelectRecipe(recipeId))\n  )\n});\n\nexport const RecipesForFoodConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(RecipesForFood);\n","import React, { FC } from 'react';\n\nimport './RecipeTable.scss';\n\nimport {\n  ImageGrid\n} from '../../components-layout';\n\nimport {\n  LoadingSpinner\n} from '@chrisb-dev/seasonal-shared-frontend-components';\nimport { IRecipeTableProps } from './RecipeTable.interface';\nimport { DietaryFiltersConnector } from '../DietaryFilters/DietaryFilters.connector';\n\nexport const RecipeTable: FC<IRecipeTableProps> = ({\n  isCurrentTabFood,\n  isLoading,\n  recipes,\n  onRecipeClick\n}) => (\n  !isCurrentTabFood\n    ? <div>\n      <DietaryFiltersConnector />\n      {\n        isLoading\n        ? <div className='c-food-table__loading-spinner-wrapper'>\n          <LoadingSpinner />\n        </div>\n        : <ImageGrid data={recipes} onClick={onRecipeClick} />\n      }\n    </div>\n    : null\n);\n","import { connect } from 'react-redux';\nimport {\n  RecipeTable\n} from './RecipeTable';\nimport {\n  selectIsCurrentTabFood\n} from '../../store';\nimport {\n  selectVisibleRecipeData,\n  recipeItemClicked,\n  selectIsCurrentSeasonRecipesLoading\n} from '@chrisb-dev/seasonal-shared-frontend-redux';\nimport { IState } from '../../interfaces';\nimport {\n  IRecipeTableInputProps,\n  IRecipeTableDispatchProps\n} from './RecipeTable.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = (\n  state: IState\n): IRecipeTableInputProps => {\n  return {\n    isCurrentTabFood: selectIsCurrentTabFood(state),\n    isLoading: selectIsCurrentSeasonRecipesLoading(state),\n    recipes: selectVisibleRecipeData(state)\n  };\n};\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IRecipeTableDispatchProps => {\n  return {\n    onRecipeClick: (recipeItemId) => dispatch(recipeItemClicked(recipeItemId))\n  };\n};\n\nexport const RecipeTableConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(RecipeTable);\n","import React, { FC } from 'react';\n\nimport './SearchBar.scss';\n\nimport { ISearchBarProps } from './SearchBar.interface';\n\nimport {\n  BareButton,\n  CrossIcon,\n  MagnifyingGlassIcon,\n  Input\n} from '@chrisb-dev/seasonal-shared-frontend-components';\n\nconst getSearchBarClassName = (isSearchBarVisible: boolean) => (\n  'c-search-bar' +\n    (\n      isSearchBarVisible\n        ? ' c-search-bar--show-full'\n        : ''\n    )\n);\n\nconst focusOnInputIfSearchVisible = (\n  ref: HTMLDivElement | undefined,\n  isSearchBarVisible: boolean\n) => {\n  if (ref && isSearchBarVisible) {\n    const input = ref.querySelector('input');\n    if (input) {\n      input.focus();\n    }\n  }\n};\n\nexport const SearchBar: FC<ISearchBarProps> = ({\n  isSearchBarVisible,\n  onHideSearchBar,\n  onSearchChanged,\n  onShowSearchBar\n}) => (\n  <div className={getSearchBarClassName(isSearchBarVisible)}\n    ref={\n      (ref: HTMLDivElement) => (\n        focusOnInputIfSearchVisible(ref, isSearchBarVisible)\n      )\n    }>\n    <Input className='c-search-bar__input'\n      onChange={(newSearchTerm) => onSearchChanged(newSearchTerm)}\n      placeholder='Search' />\n    {\n      isSearchBarVisible\n        ? <BareButton className='c-search-bar__search-button'\n            onClick={onHideSearchBar}>\n            <CrossIcon />\n          </BareButton>\n        : <BareButton className='c-search-bar__search-button'\n            onClick={onShowSearchBar}>\n            <MagnifyingGlassIcon />\n          </BareButton>\n    }\n  </div>\n);\n","import { connect } from 'react-redux';\nimport {\n  SearchBar\n} from './SearchBar';\nimport {\n  searchBarChanged,\n  selectIsSearchBarVisible,\n  showSearchBar,\n  hideSearchBar\n} from '@chrisb-dev/seasonal-shared-frontend-redux';\nimport {\n  ISearchBarDispatchProps,\n  ISearchBarInputProps\n} from './SearchBar.interface';\nimport { Dispatch } from 'redux';\nimport { IState } from '../../interfaces';\n\nconst mapStateToProps = (state: IState): ISearchBarInputProps => ({\n  isSearchBarVisible: selectIsSearchBarVisible(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): ISearchBarDispatchProps => ({\n  onHideSearchBar: () => dispatch(hideSearchBar()),\n  onSearchChanged: (newSearchTerm: string) => (\n    dispatch((searchBarChanged(newSearchTerm)))\n  ),\n  onShowSearchBar: () => dispatch(showSearchBar())\n});\n\nexport const SearchBarConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SearchBar);\n","import React, { Fragment, FC } from 'react';\n\nimport './SeasonsForFood.scss';\n\nimport {\n  TextMedium,\n  TextSmall,\n  BareButton,\n  TextHeadingSmall\n} from '@chrisb-dev/seasonal-shared-frontend-components';\n\nimport { ISeasonForFoodProps } from './SeasonsForFood.interface';\n\nexport const SeasonsForFood: FC<ISeasonForFoodProps> = ({\n  isLoading,\n  seasonsSelectedForFood,\n  onSeasonSelected\n}) => (\n  !isLoading\n    ? <Fragment>\n    <TextHeadingSmall\n      className='c-season-for-food__list-heading'>\n      When are they in season?\n    </TextHeadingSmall>\n    <div className='c-season-for-food__list'>\n      {\n        seasonsSelectedForFood && seasonsSelectedForFood.map((\n          {\n            isSelected,\n            name\n          },\n          seasonIndex\n        ) => (\n          <BareButton\n            key={name}\n            className={\n              `c-season-for-food__season` +\n                (\n                  isSelected\n                    ? ` c-season-for-food__season--selected`\n                    : ''\n                )\n              }\n            onClick={ () => onSeasonSelected(seasonIndex) }>\n            <TextMedium>\n              { name.substring(0, 3) }\n            </TextMedium>\n          </BareButton>\n        ))\n      }\n    </div>\n    <div\n      className={`c-season-food__in-season-key ` +\n        `c-season-food__in-season-key--in-season`\n      }>\n      <TextSmall className='c-season-food__in-season-key__text'>\n        In season\n      </TextSmall>\n    </div>\n    <div\n      className='c-season-food__in-season-key'>\n      <TextSmall className='c-season-food__in-season-key__text'>\n        Not in season\n      </TextSmall>\n    </div>\n  </Fragment>\n  : null\n);\n","import { connect } from 'react-redux';\nimport {\n  SeasonsForFood\n} from './SeasonsForFood';\nimport {\n  selectSeasonsSelectedForFood,\n  selectIsFoodDataOrBasicSeasonsLoading,\n  foodDetailsSelectSeason\n} from '@chrisb-dev/seasonal-shared-frontend-redux';\n\nimport { IState } from '../../interfaces';\nimport {\n  ISeasonForFoodInputProps,\n  ISeasonForFoodDispatchProps\n} from './SeasonsForFood.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = (\n  state: IState\n): ISeasonForFoodInputProps => ({\n  isLoading: selectIsFoodDataOrBasicSeasonsLoading(state),\n  seasonsSelectedForFood: selectSeasonsSelectedForFood(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): ISeasonForFoodDispatchProps => ({\n  onSeasonSelected: (seasonIndex: number) => (\n    dispatch(foodDetailsSelectSeason(seasonIndex))\n  )\n});\n\nexport const SeasonsForFoodConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SeasonsForFood);\n","import React, { FC } from 'react';\n\nimport {\n  PrimaryButton\n} from '@chrisb-dev/seasonal-shared-frontend-components';\n\nimport {\n  IViewWebAppVersionDispatchProps\n} from './ViewWebAppVersion.interface';\n\nexport const ViewWebAppVersion: FC<IViewWebAppVersionDispatchProps> = ({\n  onGoToWebVersion\n}) => (\n  <PrimaryButton onClick={onGoToWebVersion}>\n    To web version\n  </PrimaryButton>\n);\n","import { connect } from 'react-redux';\nimport {\n  ViewWebAppVersion\n} from './ViewWebAppVersion';\nimport {\n  goToWebVersion\n} from '../../store';\nimport { IViewWebAppVersionDispatchProps } from './ViewWebAppVersion.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = () => ({});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IViewWebAppVersionDispatchProps => ({\n  onGoToWebVersion: () => dispatch((goToWebVersion()))\n});\n\nexport const ViewWebAppVersionConnector = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ViewWebAppVersion);\n","import React, { FC } from 'react';\nimport './ViewAppLinks.scss';\nimport {\n  AndroidAppDownload\n} from '../AndroidAppDownload/AndroidAppDownload';\nimport {\n  ViewWebAppVersionConnector\n} from '../ViewWebAppVersion/ViewWebAppVersion.connector';\nimport { IOSAppDownload } from '../IOSAppDownload/IOSAppDownload';\n\nexport const ViewAppLinks: FC<{}> = () => (\n  <div className='c-view-app-links'>\n    <IOSAppDownload />\n    <AndroidAppDownload />\n    <ViewWebAppVersionConnector />\n  </div>\n);\n","import React, { FC } from 'react';\n\nimport './WhyEatSeasonal.scss';\n\nimport {\n  TextHeadingLarge\n} from '@chrisb-dev/seasonal-shared-frontend-components';\n\nimport {\n  ISummaryColumnList,\n  SummaryColumnList\n} from '../../components-layout';\n\nimport columns from './why-eat-seasonal-columns.json';\n\nconst summaryColumns: ISummaryColumnList = {\n  columns\n};\n\nexport const WhyEatSeasonal: FC = () => (\n  <div className='c-why-eat-seasonal'>\n    <h2 className='c-why-eat-seasonal__heading'>\n      <TextHeadingLarge>\n        Why Eat Seasonal?\n      </TextHeadingLarge>\n    </h2>\n    <SummaryColumnList {...summaryColumns} />\n  </div>\n);\n","import React, { FC } from 'react';\nimport './AllSeasons.scss';\nimport {\n  IAllSeasonsProps\n} from './AllSeasons.interface';\nimport { SeasonNameView, ImageGrid } from '../../components-layout';\nimport { LoadingSpinner } from '@chrisb-dev/seasonal-shared-frontend-components';\n\nimport InfiniteScroll from 'react-infinite-scroller';\n\nexport const AllSeasons: FC<IAllSeasonsProps> = ({\n  isLoading,\n  onFoodClick,\n  seasons,\n  hasMoreSeasonsInAllSeasonsView,\n  increaseNumberOfAllFoodSeasonsInView\n}) => (\n  isLoading\n  ? <div className='c-all-seasons__loading-spinner-wrapper'>\n    <LoadingSpinner />\n  </div>\n  : <div className='c-all-seasons'>\n    <InfiniteScroll\n      pageStart={0}\n      loadMore={increaseNumberOfAllFoodSeasonsInView}\n      hasMore={hasMoreSeasonsInAllSeasonsView}\n      loader={<LoadingSpinner key='all-seasons-spinner' />}>\n    {\n      seasons && seasons.map(({ name, food }) => (\n        <div className='c-all-seasons__season' key={name}>\n          <SeasonNameView name={name}></SeasonNameView>\n          <ImageGrid data={food}\n            onClick={onFoodClick} skipAnimation={true} />\n        </div>\n      ))\n    }\n    </InfiniteScroll>\n  </div>\n);\n","import { connect } from 'react-redux';\nimport {\n  AllSeasons\n} from './AllSeasons';\n\nimport { IState } from '../../interfaces';\nimport {\n  IAllSeasonsInputProps,\n  IAllSeasonsDispatchProps\n} from './AllSeasons.interface';\nimport { Dispatch } from 'redux';\nimport {\n  foodItemClicked,\n  selectAllSeasonsVisibleFoodData,\n  selectIsAllSeasonsFoodLoading,\n  increaseNumberOfAllFoodSeasonsInView,\n  selectHasMoreSeasonsInAllSeasonsView\n} from '@chrisb-dev/seasonal-shared-frontend-redux';\n\nconst mapStateToProps = (\n  state: IState\n): IAllSeasonsInputProps => ({\n  hasMoreSeasonsInAllSeasonsView: selectHasMoreSeasonsInAllSeasonsView(state),\n  isLoading: selectIsAllSeasonsFoodLoading(state),\n  seasons: selectAllSeasonsVisibleFoodData(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IAllSeasonsDispatchProps => ({\n  increaseNumberOfAllFoodSeasonsInView: () => (\n    dispatch(increaseNumberOfAllFoodSeasonsInView())\n  ),\n  onFoodClick: (foodItemId: string) => dispatch(foodItemClicked(foodItemId))\n});\n\nexport const AllSeasonsConnector = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AllSeasons);\n","import React, { FC } from 'react';\nimport './AllSeasonsGraph.scss';\nimport {\n  IAllSeasonsGraphInputProps\n} from './AllSeasonsGraph.interface';\nimport {\n  BarChart,\n  XAxis,\n  Tooltip,\n  ResponsiveContainer,\n  Bar,\n  YAxis\n} from 'recharts';\nimport {\n  TextHeadingMedium,\n  TextMedium\n} from '@chrisb-dev/seasonal-shared-frontend-components';\n\nexport const AllSeasonsGraph: FC<IAllSeasonsGraphInputProps> = ({\n  foodInSeasonGraphData\n}) => (\n  foodInSeasonGraphData\n    ? <div className='c-all-seasons-graph'>\n        <TextHeadingMedium className='c-all-seasons-graph__heading'>\n          Number of food items in seasons\n        </TextHeadingMedium>\n        <ResponsiveContainer width='100%' height={400}>\n          <BarChart data={foodInSeasonGraphData}>\n            <XAxis dataKey='name' />\n            <YAxis\n              dataKey='Number of food items in season'\n              allowDecimals={false} />\n            <Tooltip />\n            <Bar dataKey='Number of food items in season' fill='#5CB5CD' />\n          </BarChart>\n        </ResponsiveContainer>\n        <TextMedium className='c-all-seasons-graph__text'>\n          Enter some text in the search bar to find when certain items are in season\n        </TextMedium>\n      </div>\n    : null\n);\n","import { connect } from 'react-redux';\nimport {\n  AllSeasonsGraph\n} from './AllSeasonsGraph';\n\nimport { IState } from '../../interfaces';\nimport {\n  IAllSeasonsGraphInputProps\n} from './AllSeasonsGraph.interface';\nimport {\n  selectFoodInSeasonGraphData\n} from '@chrisb-dev/seasonal-shared-frontend-redux';\n\nconst mapStateToProps = (\n  state: IState\n): IAllSeasonsGraphInputProps => ({\n  foodInSeasonGraphData: selectFoodInSeasonGraphData(state)\n});\n\nexport const AllSeasonsGraphConnector = connect(\n  mapStateToProps\n)(AllSeasonsGraph);\n","import React, { FC } from 'react';\n\nimport './FoodDetailsPage.scss';\n\nimport {\n  FoodDetailsLoaderConnecter,\n  FoodDetailsTopSectionConnecter,\n  PageWithMenu,\n  SeasonsForFoodConnecter,\n  RecipesForFoodConnecter\n} from '../../components-main';\n\nexport const FoodDetailsPage: FC<{}> = () => (\n  <PageWithMenu>\n    <div className='c-food-details-page__main'>\n      <FoodDetailsTopSectionConnecter />\n      <FoodDetailsLoaderConnecter />\n      <RecipesForFoodConnecter />\n      <SeasonsForFoodConnecter />\n    </div>\n  </PageWithMenu>\n);\n","import React, { FC } from 'react';\n\nimport './FoodTablePage.scss';\n\nimport {\n  BottomTabsConnecter,\n  CurrentSeasonNameConnecter,\n  FoodTableConnecter,\n  PageWithMenu,\n  RecipeTableConnecter\n} from '../../components-main';\n\nexport const FoodTablePage: FC<{}> = () => (\n  <PageWithMenu>\n    <div className='c-food-table-page__main'>\n      <CurrentSeasonNameConnecter />\n      <FoodTableConnecter />\n      <RecipeTableConnecter />\n      <BottomTabsConnecter />\n    </div>\n  </PageWithMenu>\n);\n","import React, { FC } from 'react';\n\nimport './IntroPage.scss';\n\nimport {\n  AboutEatSeasonal,\n  ViewAppLinks,\n  WhyEatSeasonal\n} from '../../components-main';\n\nexport const IntroPage: FC = () => (\n  <div className='c-intro-page'>\n    <div className='c-intro-page__top-section'>\n      <img alt='Eat Seasonal splash'\n        className='c-intro-page__splash-image' src='/splash.png'/>\n      <ViewAppLinks />\n    </div>\n    <AboutEatSeasonal />\n    <WhyEatSeasonal />\n    <div className='c-intro-page__mobile-extra-app-links'>\n      <ViewAppLinks />\n    </div>\n  </div>\n);\n","import React, { FC } from 'react';\nimport {\n  PageWithMenu,\n  AllSeasonsConnector,\n  AllSeasonsGraphConnector\n} from '../../components-main';\n\nimport './AllSeasonsPage.scss';\n\nexport const AllSeasonsPage: FC<{}> = () => (\n  <PageWithMenu>\n    <div className='c-all-seasons-page'>\n      <AllSeasonsGraphConnector />\n      <AllSeasonsConnector />\n    </div>\n  </PageWithMenu>\n);\n","import React, { FC } from 'react';\nimport {\n  PageWithMenu,\n  LocationSelectorConnecter\n} from '../../components-main';\n\nimport './SettingsPage.scss';\n\nexport const SettingsPage: FC<{}> = () => (\n  <PageWithMenu>\n    <div className='c-settings-page'>\n      <LocationSelectorConnecter />\n    </div>\n  </PageWithMenu>\n);\n","import React, { FC } from 'react';\n\nimport {\n  IntroPage,\n  FoodTablePage,\n  FoodDetailsPage,\n  AllSeasonsPage,\n  SettingsPage\n} from '../components-pages';\nimport './App.scss';\n\nimport { Provider } from 'react-redux';\nimport { store, storeHistory } from '../store/reducers';\n\nimport { Route, Switch } from 'react-router';\n\nimport {\n  FOOD_TABLE_URL,\n  LANDING_URL,\n  FOOD_DETAILS_URL,\n  ALL_SEASONS_URL,\n  SETTINGS_URL\n} from '../const';\n\nimport { ConnectedRouter } from 'connected-react-router';\n\nexport const App: FC<{}> = () => (\n  <Provider store={store}>\n    <ConnectedRouter history={storeHistory}>\n      <div className='c-app'>\n        <Switch>\n          <Route path={LANDING_URL} component={IntroPage} exact />\n          <Route path={FOOD_TABLE_URL} component={FoodTablePage} />\n          <Route path={`${FOOD_DETAILS_URL}/:id`} component={FoodDetailsPage} />\n          <Route path={ALL_SEASONS_URL} component={AllSeasonsPage} />\n          <Route path={SETTINGS_URL} component={SettingsPage} />\n        </Switch>\n      </div>\n    </ConnectedRouter>\n  </Provider>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { hydrate, render } from 'react-dom';\nimport './index.scss';\nimport { App } from './components-app/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById('root');\nif (rootElement && rootElement.hasChildNodes()) {\n  hydrate(<App />, rootElement);\n} else {\n  render(<App />, rootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n","import posed from 'react-pose';\n\nimport {\n  DEFAULT_ANIMATION_TIME\n} from './animations.const';\n\nexport const fadeInOutAnimation = ({\n  enterDelay = 0,\n  exitDelay = 0,\n  enterDuration = DEFAULT_ANIMATION_TIME,\n  exitDuration = DEFAULT_ANIMATION_TIME,\n  type = 'div'\n} = {}) => posed[type]({\n  enter: {\n    delay: enterDelay,\n    opacity: 1,\n    transition: {\n      duration: enterDuration\n    }\n  },\n  exit: {\n    delay: exitDelay,\n    opacity: 0,\n    transition: {\n      duration: exitDuration\n    }\n  }\n});\n","export const DEFAULT_ANIMATION_TIME = 500;\n","import { ICancelablePromise } from '../../interfaces';\n\nexport const makePromiseCancelable = <T>(\n  promise: Promise<T>\n): ICancelablePromise<T> => {\n  let hasCancelled = false;\n\n  const wrappedPromise = new Promise<T>((resolve, reject) => {\n      promise.then(\n          (val) => hasCancelled ? reject({isCanceled: true}) : resolve(val),\n          (error) => hasCancelled ? reject({isCanceled: true}) : reject(error)\n      );\n  });\n\n  return {\n      promise: wrappedPromise,\n      cancel() {\n          hasCancelled = true;\n      }\n  };\n};\n","export const setStoredData = <T>(key: string, data: T) => {\n  localStorage.setItem(key, JSON.stringify(data));\n};\n\nexport const getStoredData = <T>(key: string): T | null => {\n  const storedData = localStorage.getItem(key);\n  return storedData && JSON.parse(storedData);\n};\n","export * from './Animations';\n\nexport * from './functions';\n"],"sourceRoot":""}